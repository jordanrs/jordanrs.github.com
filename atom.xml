<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2014-05-26T20:06:36+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Service Lane]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-service-lane/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-service-lane</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/service-lane">Hacker Rank Solutions: Service Lane</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">freeway_length</span><span class="p">,</span> <span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'><span class="n">freeway_segments</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">startpos</span><span class="p">,</span> <span class="n">endpos</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">freeway_segments</span><span class="o">[</span><span class="n">startpos</span><span class="o">.</span><span class="n">.endpos</span><span class="o">].</span><span class="n">min</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Missing Numbers]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-missing-numbers/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-missing-numbers</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/missing-numbers">Hacker Rank Solutions: Missing Numbers</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">list_1_length</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list_2_length</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">list2</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">list1hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'><span class="n">list2hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="n">times</span> <span class="o">=</span> <span class="n">list_1_length</span> <span class="o">&gt;</span> <span class="n">list_2_length</span> <span class="p">?</span> <span class="n">list_1_length</span> <span class="p">:</span> <span class="n">list_2_length</span>
</span><span class='line'>
</span><span class='line'><span class="n">times</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">list1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">list1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">list1hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">list1hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">list1hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">list2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">!=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">list2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">list2hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">list2hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">list2hash</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">list1hash</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="n">list2hash</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>  <span class="n">biggest</span> <span class="o">=</span> <span class="n">list1hash</span>
</span><span class='line'>  <span class="n">smallest</span> <span class="o">=</span> <span class="n">list2hash</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'>  <span class="n">smallest</span> <span class="o">=</span> <span class="n">list1hash</span>
</span><span class='line'>  <span class="n">biggest</span> <span class="o">=</span> <span class="n">list2hash</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">biggest</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>  <span class="n">arr</span> <span class="o">&lt;&lt;</span> <span class="n">k</span><span class="o">.</span><span class="n">to_i</span> <span class="k">if</span> <span class="n">smallest</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">!=</span> <span class="n">v</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">arr</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Lonely Integer]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-lonely-integer/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-lonely-integer</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/lonely-integer">Hacker Rank Solutions: Lonely Integer</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">lonelyinteger</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">found</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">found</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="n">found</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">found</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">found</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">found</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">b</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map!</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">to_i</span><span class="p">}</span>
</span><span class='line'><span class="nb">print</span> <span class="n">lonelyinteger</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Halloween Party]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-halloween-party/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-halloween-party</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/halloween-party">Hacker Rank Solutions: Halloween Party</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cuts</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="n">h</span> <span class="o">=</span> <span class="n">cuts</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">v</span> <span class="o">=</span> <span class="n">cuts</span> <span class="o">-</span> <span class="n">h</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">h</span> <span class="o">*</span> <span class="n">v</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Game of Thrones]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-game-of-thrones/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-game-of-thrones</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/submissions/code/1544486">Hacker Rank Solutions: Game of Thrones</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">each_char</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hash</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">==</span> <span class="kp">nil</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">hash</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">odd_chars</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">hash</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
</span><span class='line'>    <span class="k">unless</span> <span class="n">v</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">odd_chars</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">odd_chars</span> <span class="o">&gt;=</span> <span class="mi">2</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s1">&#39;NO&#39;</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="s1">&#39;YES&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>
</span><span class='line'><span class="n">palindrome?</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Filling Jars]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-filling-jars/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-filling-jars</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/filling-jars">Hacker Rank Solutions: Filling Jars</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jars</span><span class="p">,</span> <span class="n">moves</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span><span class="p">}</span>
</span><span class='line'><span class="n">total</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">moves</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">jar1</span><span class="p">,</span> <span class="n">jar2</span><span class="p">,</span> <span class="n">ammount</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">no_of_jars</span> <span class="o">=</span> <span class="p">(</span><span class="n">jar2</span> <span class="o">-</span> <span class="n">jar1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">total</span> <span class="o">=</span> <span class="n">total</span> <span class="o">+</span> <span class="p">(</span> <span class="n">no_of_jars</span> <span class="o">*</span> <span class="n">ammount</span> <span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="p">(</span><span class="n">total</span> <span class="o">/</span> <span class="n">jars</span><span class="p">)</span><span class="o">.</span><span class="n">floor</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Angry Children]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-angry-children/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-angry-children</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/angry-children">Hacker Rank Solutions: Angry Children</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">n</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="n">k</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="n">candy</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>  <span class="n">n</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="n">candy</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">candy</span><span class="o">.</span><span class="n">sort!</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># sliding widow</span>
</span><span class='line'>  <span class="n">j</span> <span class="o">=</span> <span class="n">k</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="n">lowest_dif</span> <span class="o">=</span> <span class="nb">Float</span><span class="o">::</span><span class="no">INFINITY</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">candy</span><span class="o">.</span><span class="n">length</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">dif</span> <span class="o">=</span> <span class="n">candy</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">-</span> <span class="n">candy</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="n">lowest_dif</span> <span class="o">=</span> <span class="n">dif</span> <span class="k">if</span> <span class="n">dif</span> <span class="o">&lt;</span> <span class="n">lowest_dif</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">break</span> <span class="k">if</span> <span class="n">lowest_dif</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">j</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">puts</span> <span class="n">lowest_dif</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Utopian Tree]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-utopian-tree/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-utopian-tree</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/utopian-tree">Hacker Rank Solutions: Utopian Tree</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">years</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="n">sum</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">years</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">*=</span> <span class="mi">2</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">sum</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span> <span class="n">sum</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Sherlock and The Beast]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-sherlock-and-the-beast/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-sherlock-and-the-beast</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/sherlock-and-the-beast">Hacker Rank Solutions: Sherlock and The Beast</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">largest_decent_number</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">break</span> <span class="k">if</span> <span class="n">n</span> <span class="o">-</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="s1">&#39;5&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="n">j</span><span class="p">)</span> <span class="si">}#{</span><span class="s1">&#39;3&#39;</span> <span class="o">*</span>  <span class="n">j</span> <span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">j</span> <span class="o">+=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="s1">&#39;3&#39;</span> <span class="o">*</span> <span class="n">n</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'>  <span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span> <span class="n">largest_decent_number</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Is Fibo?]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-is-fibo%3F/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-is-fibo?</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/is-fibo">Hacker Rank Solutions: Is Fibo?</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fibonachi_upto</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="n">prev2</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="n">prev1</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="n">prev1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">tmp</span> <span class="o">=</span> <span class="n">prev1</span> <span class="o">+</span> <span class="n">prev2</span>
</span><span class='line'>    <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">tmp</span> <span class="k">if</span> <span class="n">tmp</span> <span class="o">&lt;=</span> <span class="n">n</span>
</span><span class='line'>    <span class="n">prev2</span> <span class="o">=</span> <span class="n">prev1</span>
</span><span class='line'>    <span class="n">prev1</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fibos</span> <span class="o">=</span> <span class="n">fibonachi_upto</span><span class="p">(</span><span class="mi">10000000000</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">value</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">fibos</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;IsFibo&#39;</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s1">&#39;IsNotFibo&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Anagram]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-gem-stones/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-gem-stones</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/anagram">Hacker Rank Solutions: Anagram</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">tests</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">tests</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">string</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>    <span class="n">middle</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="n">string</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">middle</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="n">string</span><span class="o">[</span><span class="n">middle</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">left_sort</span> <span class="o">=</span> <span class="n">left</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>    <span class="n">right_sort</span> <span class="o">=</span> <span class="n">right</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">sort</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">left_sort</span> <span class="o">==</span> <span class="n">right_sort</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">left_sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>        <span class="n">index</span> <span class="o">=</span> <span class="n">right_sort</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span><span class='line'>        <span class="n">right_sort</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">index</span><span class="p">)</span> <span class="k">unless</span> <span class="n">index</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">right_sort</span><span class="o">.</span><span class="n">length</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Chocolate Feast]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-chocolate-feast/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-chocolate-feast</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/chocolate-feast">Hacker Rank Solutions: Chocolate Feast</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">exchange</span><span class="p">(</span><span class="n">wrappers</span><span class="p">,</span> <span class="n">number_for_free</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">wrappers</span> <span class="o">&lt;</span> <span class="n">number_for_free</span>
</span><span class='line'>  <span class="n">free_sweets</span> <span class="o">=</span> <span class="n">wrappers</span> <span class="o">/</span> <span class="n">number_for_free</span>
</span><span class='line'>  <span class="n">left_over</span> <span class="o">=</span>  <span class="n">wrappers</span> <span class="o">%</span> <span class="n">number_for_free</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">left_over</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">free_sweets</span> <span class="o">&lt;</span> <span class="n">number_for_free</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">free_sweets</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">free_sweets</span> <span class="o">+</span> <span class="n">exchange</span><span class="p">(</span><span class="n">free_sweets</span> <span class="o">+</span> <span class="n">left_over</span><span class="p">,</span> <span class="n">number_for_free</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">test_cases</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">money</span><span class="p">,</span> <span class="n">chocolate_price</span><span class="p">,</span> <span class="n">number_for_free</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span><span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bought_sweets</span> <span class="o">=</span> <span class="n">money</span><span class="o">/</span><span class="n">chocolate_price</span>
</span><span class='line'>
</span><span class='line'>  <span class="vg">$stdout</span><span class="o">.</span><span class="n">puts</span>  <span class="n">bought_sweets</span> <span class="o">+</span> <span class="n">exchange</span><span class="p">(</span><span class="n">bought_sweets</span><span class="p">,</span> <span class="n">number_for_free</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Gem Stones]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-anagram/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-anagram</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/gem-stones">Hacker Rank Solutions: Gem Stones</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lines</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'>
</span><span class='line'><span class="n">char_counts</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">lines</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">visted_chars</span> <span class="o">=</span>  <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="vg">$stdin</span><span class="o">.</span><span class="n">gets</span><span class="o">.</span><span class="n">chomp</span>
</span><span class='line'>  <span class="n">line</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">visted_chars</span><span class="o">[</span><span class="n">char</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">char_counts</span><span class="o">[</span><span class="n">char</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span>  <span class="n">char_counts</span><span class="o">[</span><span class="n">char</span><span class="o">].</span><span class="n">nil?</span>
</span><span class='line'>      <span class="n">char_counts</span><span class="o">[</span><span class="n">char</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="n">visted_chars</span><span class="o">[</span><span class="n">char</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="n">char_counts</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span> <span class="n">output</span> <span class="o">&lt;&lt;</span> <span class="n">key</span> <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">lines</span>   <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="n">output</span><span class="o">.</span><span class="n">length</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inplace Quicksort In Ruby]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/17/quicksort-in-ruby/"/>
    <updated>2014-05-17T16:59:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/17/quicksort-in-ruby</id>
    <content type="html"><![CDATA[<p>Inplace quicksort algorithum implemented in Ruby</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">array</span><span class="o">.</span><span class="n">length</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">first</span> <span class="o">&gt;</span> <span class="n">last</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="n">last</span><span class="p">)</span> <span class="o">*</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">]</span>
</span><span class='line'>    <span class="n">left</span> <span class="o">=</span> <span class="n">first</span>
</span><span class='line'>    <span class="n">right</span> <span class="o">=</span> <span class="n">last</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">pivot</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span>
</span><span class='line'>        <span class="n">tmp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">left</span><span class="o">]</span>
</span><span class='line'>        <span class="n">array</span><span class="o">[</span><span class="n">left</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span>
</span><span class='line'>        <span class="n">array</span><span class="o">[</span><span class="n">right</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">left</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">right</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">right</span><span class="p">)</span>
</span><span class='line'>    <span class="n">quicksort</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">last</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithums in Ruby]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/02/algorithums-in-ruby/"/>
    <updated>2014-05-02T08:05:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/02/algorithums-in-ruby</id>
    <content type="html"><![CDATA[<h2>Greatest Common Divisor</h2>

<p>Ruby has a native implementation of the greatest common divisor.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="mi">20</span><span class="o">.</span><span class="n">gcd</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span>
</span><span class='line'>  <span class="o">=&gt;</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>However as a pure academic exercise lets implement Euclid&rsquo;s algorithm for finding the greatest common divisor between any number of numbers in ruby!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">v</span><span class="o">.</span><span class="n">zero?</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">u</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">gcd</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">u</span><span class="o">.</span><span class="n">modulo</span><span class="p">(</span><span class="n">v</span><span class="p">))</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Greatest Common Divisor for three numbers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">gcdt</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gcd</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">u</span><span class="p">,</span> <span class="n">v</span><span class="p">),</span> <span class="n">w</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Extending this to a generic algorithm that can take any number of numbers</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">gcd_any</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">ArgumentError</span> <span class="s1">&#39;Need at least two numbers&#39;</span> <span class="k">if</span> <span class="n">args</span><span class="o">.</span><span class="n">length</span> <span class="o">&lt;</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">start</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">shift</span>
</span><span class='line'>    <span class="n">args</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">start</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
</span><span class='line'>      <span class="n">gcd</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick way to join across two databases]]></title>
    <link href="http://jordanrs.github.io/blog/2014/04/30/dblink/"/>
    <updated>2014-04-30T17:54:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/04/30/dblink</id>
    <content type="html"><![CDATA[<p>A recent hack / sketchy 1st product draft required datasets that live in two different database to be joined together to do some analysis on. Initially thoughts of denormalization or key/value lookup crossed peoples minds but wanting a quick win to try and get the idea validated as quickly as possible, I kept on digging.</p>

<p>As always <a href="http://stackoverflow.com/questions/9493332/postgres-how-to-create-a-select-query-that-would-join-two-databases">stackoverflow</a> provided the start of the journey of discovery with something called dblink.</p>

<h2>dblink to the rescue!</h2>

<p><a href="http://www.postgresql.org/docs/current/interactive/contrib-dblink-function.html">dblink</a> is a hidden gem of a extension that made doing a join across two databases (weather there local or remote) a total breeze. Firstly the extension needs to be installed on the database with the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dblink</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once added to your database using it requires three pieces of information</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dblink</span><span class="p">(</span><span class="s1">&#39;CONNECTION STRING&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;QUERY STRING&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">AS</span> <span class="n">t</span><span class="p">(</span> <span class="n">CASTING</span> <span class="n">RESTULS</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Connection String</h2>

<p>I personally use this format of string as it allows easy access to both local and remote DBs.</p>

<pre><code>postgres://PG_USER:PG_PASSWORD@HOST:PORT/DATABSE_NAME'

eg

postgres://pguser:abcd@127.0.0.1:5432/test_db'
</code></pre>

<!-- more -->


<h2>Query String</h2>

<p>This is query you wish to run on the remote machine. It can be any valid SQL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="s1">&#39;SELECT title, price, category FROM products WHERE shop_id = 99&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Casting the results</h2>

<p>When the results from the query are returned to local machine postgres doesn&rsquo;t know the column types of the received result set and thus needs to be told about them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">title</span> <span class="nb">varchar</span><span class="p">,</span> <span class="n">price</span> <span class="nb">int</span><span class="p">,</span> <span class="n">category</span> <span class="nb">varchar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Full call example</h2>

<p>So putting those three things together the final call would be</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dblink</span><span class="p">(</span><span class="s1">&#39;postgres://pguser:abcd@127.0.0.1:5432/test_db&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;SELECT title, price, category FROM products WHERE shop_id = 99&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">title</span> <span class="nb">varchar</span><span class="p">,</span> <span class="n">price</span> <span class="nb">int</span><span class="p">,</span> <span class="n">category</span> <span class="nb">varchar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Allowing you to manipulate this results just as it they were from a local database table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Refractor - Bad Smells in Code]]></title>
    <link href="http://jordanrs.github.io/blog/2014/03/11/refractoring-ruby/"/>
    <updated>2014-03-11T08:12:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2014/03/11/refractoring-ruby</id>
    <content type="html"><![CDATA[<p>Notes from Refactoring Ruby by Jay Fields, Shane Harvie, Martin Fowler &amp; Kent Beck.</p>

<p><strong>Duplicated Code</strong></p>

<p>Problem &ndash; This stinks, when you have the same expression in two different methods in the same class</p>

<p>Solution &ndash; Extract the method to a new method in the class and use in place</p>

<p><strong>Duplication in Sibling Classes</strong></p>

<p>Problem &ndash; Two methods in sibling class that that have the same expression.</p>

<p>Solution &ndash; Extract the method into one on the shared base class and use this instead.</p>

<p><strong>Duplication across unrelated classes</strong></p>

<p>Problem &ndash; The same method or expression across two unrelated classes</p>

<p>Solution &ndash; Extract the method into a new class or module and then use either inheritance or composition to give the class the new method.</p>

<!-- more -->


<p><strong>Long Method</strong></p>

<p>Problem &ndash; The longer the method the harder it can become for someone to understand</p>

<p>Solution &ndash; Long methods should be broken down into smaller methods with a single responsibility</p>

<hr />

<p>Problem &ndash; Code within a method needs a comment to explain what it is doing ie the distance between what the method does on the surface and how it does it internally</p>

<p>Solution &ndash; The code should be extracted into a new method and given a new that describes its function clearly</p>

<p>Other potential problems &ndash; Conditionals and loops can give sign for extractions. Loops can be switched out with collection closure methods and then these can be extract out further</p>

<p><strong>Large Class</strong></p>

<p>Problem &ndash; Lots of instance variables in a class is generally a sign that the class is doing to much. Especially when different instances of a class use different sets of variables</p>

<p>Solution &ndash; Instance variables that make sense to go together should be grouped with any associating methods and extracted to a subclass, separate class or module</p>

<p><strong>Long Parameter List</strong></p>

<p>Problem &ndash; passing long lists of parameters into a function can become hard to understand and difficult to follow.</p>

<p>Solution &ndash; Swap these long lists with passing the object in instead or creating a name parameter instead</p>

<p>Caveat &ndash; This can increase coupling between objects by passing objects through instead of parameter lists. Instead do use parameter list but be aware of the trade off</p>

<p><strong>Divergent Change</strong></p>

<p>Problem &ndash; Changes to the same object happen to completely separate reasons. ie the same object needs to be changed when a user type is added or when a new sport is added.</p>

<p>Solution &ndash; A sign that this class is doing to much and should instead be to separate classes</p>

<p><strong>Shotgun Surgery</strong></p>

<p>Problem &ndash; The opposite of Divergent Change, when you have to make changes across multiple different classes when you make one type of change.</p>

<p>Solution &ndash; Move the methods and fields into there own classes this could be an in-line class, existing or separate class.</p>

<p><strong>Feature Envy</strong></p>

<p>Problem &ndash; A method being more interested in the data from another class then its own</p>

<p>Solution &ndash; Move the envious methods over to the other class</p>

<p>Not so cut a dry &ndash; If the method uses data from several classes the general rule of thumb is that the method belongs in the class of which the most data is used. Or put things together that change together</p>

<p><strong>Data Clumps</strong></p>

<p>Problem &ndash; You frequently see the same instances variables hanging around together, passed into the same methods together.</p>

<p>Solution &ndash; extract these same parameters into a class of there own and then change the method signatures to use the object. As long as your replacing two or more instance variables you&rsquo;ll come out ahead. One way to test if variables belong together is to delete one and see if the rest still make sense.</p>

<p><strong>Primitive Obsession</strong></p>

<p>Problem &ndash; using primitive types ie (string, float, fixnum etc.) when a small object would be better</p>

<p><strong>Case Statments</strong></p>

<p>Problem &ndash; Case statements are a sign of duplication usually. One case statement could appear several times around the code base as its usually switching on a type code</p>

<p>Solution &ndash; Polymorphism, depending on the number of case statements could be overkill and using an explicit method or state/strategy be better</p>

<p><strong>Parallel Inheritance Hierarchies</strong></p>

<p>Problem &ndash; Every time you create a subclass of one class you also make a subclass of another class. Usually the prefixes of the two different hierarchies will be the same</p>

<p><strong>Lazy class</strong></p>

<p>Problem &ndash; A class/module that doesn&rsquo;t do enough to justify it being around</p>

<p>Solution &ndash; Collapse the class hierarchy or make the classes/modules in-line</p>

<p><strong>Speculative Generality</strong></p>

<p>Problem &ndash; When design decisions are taken for potential or future use cases that aren&rsquo;t in the current spec or brief. Increase complexity since the things aren&rsquo;t required</p>

<p>Solution &ndash; Remove this code, good highlighter is when the only users of a method or class are the test cases!</p>

<p><strong>Temporay Field</strong></p>

<p>Problem &ndash; When a instance variable is only set in certain circumstances. Code is difficult to understand due to the expectation of objects using all there variables</p>

<p>Solution &ndash; Extract class on the concerning code or introduce a null object to create alternative component</p>

<p><strong>Message Chains</strong></p>

<p>Problem &ndash; Long chains of objects reaching across other objects for information. Introduces tight coupling of the structure make changes more difficult</p>

<p>Solution &ndash; You can hide the delegates by forwarding on methods to reduce the chain length or you can look at the resulting method and potentially extract it and move it down the message chain</p>

<p><strong>Middle Man</strong></p>

<p>Problem &ndash; When looking at a classes interface we see that most of the methods delegate to another object in the class.</p>

<p>Solution &ndash; There comes a point when it becomes better to remove the middle man and talk directly to the object. If its only a few methods you can in-line them into the caller or if it is a lot you can replace delegation with a hierarchy and include a module instead</p>

<p><strong>Inappropriate Intimacy</strong></p>

<p>Problem &ndash; Class that know far to much about other classes private parts.</p>

<p>Solution &ndash; Overly intimate class need to be broken up where its moving methods or fields , or extracting classes or hiding delegates it depends on the severity of the infidelity</p>

<p><strong>Alternative Classes with different Interfaces</strong></p>

<p>Problem &ndash; Methods that do the same thing but have different signatures for what they do.</p>

<p>Solution &ndash; Move method to the classes till there protocols are the same</p>

<p><strong>Incomplete Library class</strong></p>

<p>Problem &ndash; A third party library is missing a method / algorithm / data type you need</p>

<p>Solution &ndash; Monkey patching classes in ruby makes small additions easily possible</p>

<p><strong>Data Class</strong></p>

<p>Problem &ndash; A class that just has attributes and nothing else. They are most certainly being manipulated in far to much detail by other classes.</p>

<p>Solution &ndash; Look at moving these attributes out to other classes with more responsibility</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Cheat Sheet]]></title>
    <link href="http://jordanrs.github.io/blog/2013/09/23/vim-shortcuts/"/>
    <updated>2013-09-23T09:10:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/09/23/vim-shortcuts</id>
    <content type="html"><![CDATA[<hr />

<h2>Basic Commands</h2>

<p>i = insert mode</p>

<p>h,j,k,l = move left, up, down, left<br/>
w = move from word to word<br/>
b = move back word to word<br/>
W = jumps the whole word<br/>
B = jusmps back a word to word</p>

<p>$ = go to end of the line<br/>
^ = go to the begining of the line<br/>
0 = goes to the very beginning</p>

<p>gg = goes to the begginig of the file<br/>
G = goes to the bottom of the file<br/>
{ } = jumps paragraphs</p>

<p>f = finds the first occurence of a string in the file<br/>
F = fins the first occurance of a string backward</p>

<p>number followed by comman (4dd) &ndash; deletes four lines</p>

<p>3gg = goes 3 lines from the top <br/>
:13 = goes to line 13<br/>
3 G = goes three lines from the bottom</p>

<!-- more -->


<hr />

<h2>Advanced Movement</h2>

<p>ctrl d &ndash; moves half screen down<br/>
ctrl u &ndash; moves half screen up<br/>
ctrl f &ndash; full screen forward<br/>
ctrl b &ndash; full screen backward</p>

<p>M &ndash; goes to middle of the window<br/>
H &ndash; goes to top of window<br/>
L &ndash; goes to last line of window<br/>
3L &ndash; goes three lines above bottom of window</p>

<p>zt &ndash; moves the line our cursor is on to the top<br/>
zb &ndash; moves the line to the botton<br/>
zz &ndash; moves the line to the middle</p>

<p>ma &ndash; saves cursor position to a register<br/>
&lsquo;a &ndash; goes directly to register a<br/>
&rsquo; &ndash; move between markers</p>

<hr />

<h2>Basic Editing</h2>

<p>X &ndash; deletes behind the cursor<br/>
x &ndash; delete whats under the cursor<br/>
dd &ndash; delete the line<br/>
dw &ndash; delete the word<br/>
db &ndash; delete previous word</p>

<p>cc &ndash; delete line and enter insert mode<br/>
cw &ndash; delete work and enter insert mode<br/>
cd &ndash; delete previous word and enter insert mode</p>

<p>ci&#8221; &ndash; changes whats inbetween two &ldquo;<br/>
ca&rdquo; &ndash; deletes everything inside the quotes</p>

<hr />

<h2>Cut, Copy and Paste</h2>

<p>Every deletion is a cut command, puts in a special register for pasting later</p>

<p>p &ndash; pastes last thing in deletion cut register
P &ndash; pastes before the cursor
y &ndash; yank/copy something copy can be used with any familiar command<br/>
yw &ndash; copy word <br/>
yy &ndash; copy line</p>

<hr />

<h2>Search</h2>

<p>/search = starts searching for word search. it is also case sensitive<br/>
?search = looks backwards for the word search<br/>
set incsearch = sets incremental search on <br/>
set ignorecase = turns off case sensitive search<br/>
set hlsearch = turns on highlight search<br/>
nohlsearch / noh = turns off highlight search<br/>
n = find next occurence. vim stores the last search<br/>
c/find = will delete from the cursor to find and then enter insert mode</p>

<p>vim search can use regexs</p>

<hr />

<h2>Search and Replace</h2>

<p>:s/pattern/replace/flags<br/>
:s &ndash; perfoms a substitutions replaces on first occurance by default<br/>
:s/vim/Vim &ndash; replaces vim for Vim<br/>
:%s/vim/Vim &ndash; replaces whole file with vim for Vim<br/>
:%s/vim/Vim/g &ndash; replaces whole file with vim for Vim globally</p>

<p>vim will use previous serach pattern so can do :s//pattern<br/>
when using regex can use \ze or \zs to stop selection before or after</p>

<p>Visual mode &ndash; v<br/>
visual line mode &ndash; V</p>

<p>gv &ndash; reslects last selection</p>

<p>go to a bracket, enter visual mode hit % and that will find the corresponding bracket</p>

<p>FLAGS</p>

<p>c = confirm, asks for confirmation for oeach occurence<br/>
i = insensitive<br/>
g = finds all occurances in a line</p>

<p>HELP</p>

<p>:help s &ndash; opens the help for a command</p>

<hr />

<h2>Macros and Register</h2>

<p>ctrl g &ndash; get file info</p>

<p>macros store a command pipeline that can be used over and over</p>

<p>qa &ndash; start recording a macro in register a<br/>
q &ndash; stops recroding<br/>
:registers / reg &ndash; shows the recorded registers<br/>
@a &ndash; runs macro in a register<br/>
@@ &ndash; runts the last macro ran again</p>

<hr />

<h2>Command Line in Vim</h2>

<p>:! &ndash; initalises comman from the shell then run command<br/>
:read !date &ndash; puts the oupt of shell into the file under cursor<br/>
:r !curl &mdash;silent URL &ndash; outputs the file into the buffer<br/>
you can take the selected text buffer and feed it into standard in and replace it with output</p>

<hr />

<h2>Navigating Between Buffers</h2>

<p>:ls &ndash; lists all active buffers for files in memory<br/>
:bn / bnext &ndash; next buffer<br/>
:bp / bprev &ndash; previous buffer<br/>
:b# &ndash; last buffer we visited<br/>
:bf &ndash; first buffer</p>

<p>:bd 14 &ndash; deletes buffer 14</p>

<hr />

<h2>Windows and Tabs</h2>

<p>Split windows</p>

<p>:vsplit / vs file_path &ndash; splits the buffer vertically
ctrl+w h/l = move between left right<br/>
ctrl+w H / L = move to the left / right most part<br/>
ctrl + w J/K = move to the bottom / top<br/>
ctrl + w +/&ndash; = increase/decrease window hight 1 row<br/>
ctrl + w </> = increase/decrease width by 1 column<br/>
ctrl + w = = auto resize windows equally<br/>
:q = clost a window buffer</p>

<p>:sb 2 = split buffer in memory<br/>
:vert sb = vetical split buffer in memory</p>

<p>Tabs</p>

<p>:tab e / tabedit file_path<br/>
:gt &ndash; move oen tab forward<br/>
:gT &ndash; move one tab backward</p>

<hr />

<h2>Graphical Vim</h2>

<p>set gfn &ndash; sets current font</p>

<hr />

<h2>Indents and Folds </h2>

<p>:set list &ndash; prnts lines/tabs/space<br/>
>> &ndash; indent of one tab<br/>
8>> &ndash; indents following 8 lines<br/>
:set expandtab &ndash; sets soft tabs<br/>
:set noexpandtab &ndash; sets tabs normal<br/>
:set shiftwidth=3 &ndash; 3 spaces for one indentation<br/>
:set smartindent &ndash; sets smart indentation<br/>
:set softtabstop / sts 3</p>

<p>in visual mode &ndash;</p>

<p>gv &ndash; reselects last selection<br/>
>/&lt; &ndash; indents</p>

<p>Auto indent
= on select texted auto indent<br/>
=3j auto indent next 2 lines<br/>
=G indents the whole file</p>

<p>In inset mode
tab = inserts<br/>
ctrl + t = indent forward<br/>
ctrl + d = indent back</p>

<p>Folding</p>

<p>manual folds
zf5j &ndash; fold the next 5 lines<br/>
zo &ndash; open fold<br/>
zO &ndash; open from cursor fown<br/>
zc &ndash; close everything from position up fold<br/>
zd &ndash; delete fold<br/>
zf% &ndash; folds the matching bracket<br/>
zi &ndash; inverts folding on/off</p>

<p>auto folding</p>

<p>set foldmethod/fdm &ndash; numberous options see help foldmethod<br/>
set fdm=sytax = fold baed on syntax<br/>
set fdm=marker = set a custom folder maker } for instace</p>

<hr />

<h2>.vimrc File</h2>

<p>:so % &ndash; source our current file</p>

<p>set nocompatible &ndash; sets vims way of doing things</p>

<p>allows file types to be detected than plugins and indentation set up based on those files</p>

<p>filetype on<br/>
filetype indent on<br/>
filetype  plugin on</p>

<p>let VARIAABLE &ndash; &ldquo;.&#8221;<br/>
syntax enable</p>

<p>set ignorecase<br/>
set hlsearch<br/>
set autoindent<br/>
set fileencoding=utf-8<br/>
set encoding=utf-8<br/>
set backspace=indent.eol.start</p>

<p>set smartcase &ndash; perform smart searchs<br/>
gdefault &ndash; perform global replacments<br/>
set incsearch<br/>
set showmatch &ndash; highlight all matching parentheses</p>

<p>deals with how windows are auto sized<br/>
set winwidth=84<br/>
set winheight=5<br/>
set winminheight=5<br/>
set winheight=999</p>

<p>set no/list &ndash; view all tabs and line endings<br/>
set guifont= &ndash; sets the font <br/>
set guioptions= add options<br/>
set guioptions-= remove options<br/>
set number &ndash; set line numbers<br/>
set visualbell &ndash; flash the screen over the bell<br/>
set cursoline &ndash; highlight line your in</p>

<p>set cc=80 &ndash; sets line at 80th column<br/>
set background=dark<br/>
colorschmeme solarized</p>

<p>au BufRead,BufNewFil *.ru setfiletype ruby</p>

<hr />

<h2>Mappings</h2>

<p>sequence of characters that triggers sequence of commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing Node.js]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/28/removing-node-dot-js/"/>
    <updated>2013-08-28T19:05:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/28/removing-node-dot-js</id>
    <content type="html"><![CDATA[<p>For when i cant find it, here is the best instructions i found for removing</p>

<ol>
<li>Go to /usr/local/lib and delete any node and node_modules</li>
<li>Go to /usr/local/include and delete any node and node_modules directory</li>
<li>If you installed with brew install node, then run brew uninstall node in your terminal</li>
<li>Check your Home directory for any &ldquo;local&rdquo; or &ldquo;lib&rdquo; or &ldquo;include&rdquo; folders, and delete any &ldquo;node&rdquo; or &ldquo;node_modules&rdquo; from there</li>
<li>Go to /usr/local/bin and delete any node executable</li>
</ol>


<p><a href="http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x">source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Jenkins with Chef for Rails Project]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/"/>
    <updated>2013-08-21T07:26:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project</id>
    <content type="html"><![CDATA[<p>There are numerous guides available on line for setting up a fresh install of Jenkins with numerous different configurations but i wanted to create a chef recipe that would give me a clean Jenkins install with my required project dependencies (excluding rvm) at the click of a button.</p>

<p>The reasons the excluding RVM in the chef process, even though the chef-rvm cookback is fantastic having used it before in the creation of a Rails stack is that i just could get system level RVM to play nice with Jenkins and user specific RVM (to the Jenkins user) to automatically install without asking for the Jenkins password. Better minds will probably be able to solve this issue but i opted for a different approach.</p>

<!-- more -->


<h1>The CookBook</h1>

<p>My build cookbook and recipes can be found over on GitHub at [URL]. It contains everything we require (except rvm) for building our rails apps, Postgres for the postgres C headers for the pg gem, a javascript runtime in the form of node.js for rails 3.1 and greater asset compilation, a web server for accessing Jenkins, libqt4 and Xvfb for headless running of our integration specs with capybara webkit.</p>

<ul>
<li>Clone or download the chef repositry from [URL]</li>
<li>add in your own .chef/knife.rb and .pem files or make sure they can connect to your chef server</li>
<li>run <code>berks install</code> and <code>berks upload</code> to collect together all the associated cookbooks then push them up to the hosted chef repo</li>
<li>run <code>rake install</code> to upload our custom cookbooks and roles</li>
<li>then create a new instance of EC2 that will automatically be built with our jenkins build recipes by running.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo
</span></code></pre></td></tr></table></div></figure>


<p><em>this command requires a few config options to be added to your knife file to achieve the brevity. I wrote about this in a previous post <a href="http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/">here</a></em></p>

<p>This final command will set about creating a new EC2 micro instance with Ubuntu 12.04 AMI in Europe and then install all the necessary packages for running our standard rails stack. It will also setup a reverse proxy for nginx so that jenkins will be available on on completeion at the EC2 instances Public DNS address.</p>

<p>If all goes well the instal takes around 20 minutes and at the end you should see a print out as such.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com Chef Client finished, 91 resources updated
</span><span class='line'>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span><span class='line'>
</span><span class='line'>Instance ID: i-XXXXXXXX
</span><span class='line'>Flavor: t1.micro
</span><span class='line'>Image: ami-7962730d
</span><span class='line'>Region: eu-west-1
</span><span class='line'>Availability Zone: eu-west-1a
</span><span class='line'>Security Groups: default
</span><span class='line'>Security Group Ids: default
</span><span class='line'>Tags: <span class="o">{</span><span class="s2">&quot;Name&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;i-XXXXXXXX&quot;</span><span class="o">}</span>
</span><span class='line'>SSH Key: chef-test
</span><span class='line'>Root Device Type: ebs
</span><span class='line'>Root Volume ID: vol-XXXXXXXX
</span><span class='line'>Root Device Name: /dev/sda1
</span><span class='line'>Root Device Delete on Terminate: <span class="nb">true</span>
</span><span class='line'>Public DNS Name: ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span><span class='line'>Public IP Address: XX.XXX.XXX.X
</span><span class='line'>Private DNS Name: ip-XX-XX-XXX-XXX.eu-west-1.compute.internal
</span><span class='line'>Private IP Address: XX.XX.XXX.XXX
</span><span class='line'>Environment: _default
</span><span class='line'>Run List: role<span class="o">[</span>jenkinsbuilder<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Copy your public DNS address <code>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com</code> paste into a browser, and you should be greated by jenkins loving face.</p>

<p><img src="http://jordanrs.github.io/images/post_images/21-8-2013-jenkins/jenkins-face.png" alt="Jenkins Welcome" /></p>

<h2>A few caveats</h2>

<ul>
<li><p>We need to change the <strong>HTTP_HOST</strong> value in <strong>/etc/default/jenkins</strong> to be <strong>127.0.0.1</strong> as it is set by default to the DNS Name which means the deamon doesnt work to reload the app with nginx front end.</p></li>
<li><p>Secondly we need to <code>jenkins ALL=(ALL) NOPASSWD:ALL</code> to /etc/sudoers so that Jenkins isn&rsquo;t asked for a password (jenkins password required for &lsquo;apt-get &mdash;quiet &mdash;yes update&rsquo;:)</p></li>
<li><p>Postgres extensions arent installed and any builds which use them will fail. So if your using an extension like hstore it needs to be activated and this <a href="https://gist.github.com/terryjray/3296171">gist</a> gives a good run down of the commands to run.</p></li>
</ul>


<h1>Building our Rails Project</h1>

<h2>Setting up RVM</h2>

<p>The instructions for installing rvm with can all be found with more detail at <a href="https://rvm.io/integration/jenkins">here</a>, so the below is mearly a quick overview of the commands i ran to get rvm set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    sudo su -s /bin/bash jenkins <span class="c">#Loggin in with full terminal as jenkins </span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">cd</span> ~ <span class="c">#change to jenkins home dir</span>
</span><span class='line'>
</span><span class='line'>    <span class="se">\c</span>url -L https://get.rvm.io | bash <span class="c">#install RVM the opening slash is important and delibrate</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Add the following two lines to ~/.bashrc </span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[[</span> -s <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span>
</span><span class='line'>    <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/.rvm/bin <span class="c"># Add RVM to PATH for scripting</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># exit the shell and log back in </span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">type </span>rvm | head -1 <span class="c"># should show rvm is a function</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># add the following flags to ~/.rvmrc</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">rvm_install_on_use_flag</span><span class="o">=</span>1
</span><span class='line'>    <span class="nv">rvm_project_rvmrc</span><span class="o">=</span>1
</span><span class='line'>    <span class="nv">rvm_gemset_create_on_use_flag</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Again more explanation can be found over at the rvm instruction pages. <a href="https://rvm.io/integration/jenkins">here</a></p>

<h2>Pulling from Heroku</h2>

<p>To pull from heroku ie use heroku as the SCM we need to add the generated SSH key to a user associated with the project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su -s /bin/bash jenkins
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'>cat ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<p>The output from the cat command needs to be copied and pasted into the ssh-keys for a user on heroku.com or via heroku cli <code>heroku keys:add ~/.ssh/id_rsa.pub</code></p>

<p>The next thing is to make sure heroku is added to jenkins <code>~/.ssh/known_hosts</code>, the easiest way to do this is just git clone one of the projects for user the key was just added to and type yes when asked about the host.</p>

<h1>Setting up Jenkins</h1>

<p>Now that Jenkins will boot up and we are ready to pull from our SCM provider its time to setup security, install some plugins and set some global config variables so make life easier.</p>

<h2>Security</h2>

<p>Jenkins security is pretty simple and the docs do a great job of demonstrating how to set up a standard username/password login system with you as the super user. There is no need for me to duplicate this so head over to <a href="https://wiki.jenkins-ci.org/display/JENKINS/Standard+Security+Setup">Jenkins Wiki</a> and follow their instructions.</p>

<h2>Plugins</h2>

<p>The following plugins are my standard goto&rsquo;s for a new jenkins install</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin"><strong>git</strong></a> &ndash; Adds git support to Jenkins SCM section. A global user name and email address will need to be configured in the global settings panel.</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup"><strong>thinbackup</strong></a> &ndash; Regularly backup global config and project configs</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin"><strong>chucknorris</strong></a> &ndash; Chuck Norris banter on failed and successful builds</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Ruby+metrics+plugin"><strong>rubyMetrics</strong></a> &ndash; Allows the interpretation of RCov coverage reports</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Heroku+Plugin"><strong>heroku</strong></a> &ndash; Interact with heroku</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin"><strong>email extension</strong></a> &ndash; Extends Jenkins built in e-mail.</li>
</ul>


<h1>Setting up the Rails Project</h1>

<h2>Getting good reports</h2>

<p>When running rails tests within Jenkins the output isn&rsquo;t formatted in such a way that Jenkins really knowns what to do with it, so a failed test run and a successful test run are seen as fundamentally the same thing. To alter this behaviour need to add the <strong>ci_reporter</strong> gem to to your projects gem file. The same applies to the standard code coverage gem <strong>simplecov</strong>, the output produced can be seen in the Jenkins workspace, but you dont get the nice tracking graphs. An easy way to fix this is with the <strong>simplecov-rcov</strong> gem which allows simplecovs output to be formatted like rocvs which can be picked up by the rubymetrics plugin in Jenkins.</p>

<p>All you need to do is add the following lines above SimpleCov.start</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov-rcov&#39;</span>
</span><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="ss">SimpleCov</span><span class="p">:</span><span class="ss">:Formatter</span><span class="o">::</span><span class="no">RcovFormatter</span>
</span><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="s1">&#39;rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>     <br/>
The best way to get the correct formatted output is to set up rake task using <code>RSpec::Core::RakeTask</code> in &lsquo;lib/tasks/spec.rake&rsquo; that allows you to run all specs with the command <code>rake all</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:all</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ci:setup:rspec&quot;</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;**/*_spec.rb&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Separate Environment</h2>

<p>The last thing i did was setup a new environment for the Jenkins user based of the default test environment. First I create a <code>config/environments/jenkins_test.rb</code>, add this to any bundler groups that test env was part of in config/application.rb and then leave out setting up a entry in <code>database.yml</code> as this will be done during the Jenkins build process</p>

<h1>Project Setup</h1>

<h2>Advanced Project Options</h2>

<p>Set up quiet time option in the build when using heroku deploy hooks as they can fire before the last commit is available</p>

<h2>Build Triggers</h2>

<p>Trigger builds remotely through heroku deploy hooks.</p>

<h2>Build</h2>

<p>The current stock build script for a rails project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Jenkins is installed as a service account when its running builds so it isn&#39;t </span>
</span><span class='line'><span class="c"># using a login shell. So since RVM was installed to the user and is setup through .bashrc </span>
</span><span class='line'><span class="c"># this doesn&#39;t happen so we need to load RVM right after the shebang   </span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set the global rails env</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins
</span><span class='line'>
</span><span class='line'><span class="c"># Load RVM with a ruby and a gemset, if neither are present they will be installed</span>
</span><span class='line'>rvm use 2.0.0@brandtone
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'><span class="c"># Duplicate a stock database yml file and the change our database name</span>
</span><span class='line'>cp ~/database.yml config/database.yml
</span><span class='line'>sed -i <span class="s1">&#39;s/database_name/brandtone/g&#39;</span> config/database.yml
</span><span class='line'>
</span><span class='line'><span class="c"># Create if not present and migrate out DB</span>
</span><span class='line'>rake db:create <span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins_test
</span><span class='line'>rake db:migrate <span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins_test
</span><span class='line'>
</span><span class='line'><span class="c"># run all tests in a virtual frame buffer thats auto numbered to prevent clashes</span>
</span><span class='line'>xvfb-run --auto-servernum bundle <span class="nb">exec </span>rake all
</span></code></pre></td></tr></table></div></figure>


<h2>Post Build Actions</h2>

<p>Standard Post Build Actions</p>

<ul>
<li>Activate Chuck Norris</li>
<li>Publish JUnit test result report</li>
<li>Publish RCov Report</li>
<li>Send Email Notifications</li>
</ul>

]]></content>
  </entry>
  
</feed>
