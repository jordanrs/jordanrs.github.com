<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2014-04-30T20:46:24+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick way to join across two databases]]></title>
    <link href="http://jordanrs.github.io/blog/2014/04/30/dblink/"/>
    <updated>2014-04-30T17:54:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/04/30/dblink</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th></th>
<th align="left"> Left align </th>
<th align="right"> Right align </th>
<th align="center"> Center align </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> This       </td>
<td align="right">        This </td>
<td align="center">     This     </td>
</tr>
<tr>
<td></td>
<td align="left"> column     </td>
<td align="right">      column </td>
<td align="center">    column    </td>
</tr>
<tr>
<td></td>
<td align="left"> will       </td>
<td align="right">        will </td>
<td align="center">     will     </td>
</tr>
<tr>
<td></td>
<td align="left"> be         </td>
<td align="right">          be </td>
<td align="center">      be      </td>
</tr>
<tr>
<td></td>
<td align="left"> left       </td>
<td align="right">       right </td>
<td align="center">    center    </td>
</tr>
<tr>
<td></td>
<td align="left"> aligned    </td>
<td align="right">     aligned </td>
<td align="center">   aligned</td>
</tr>
</tbody>
</table>


<p>A recent hack / sketchy 1st product draft required datasets that live in two different database to be joined together to do some analysis on. Initially thoughts of denormalization or key/value lookup crossed peoples minds but wanting a quick win to try and get the idea validated as quickly as possible, I kept on digging.</p>

<p>As always <a href="http://stackoverflow.com/questions/9493332/postgres-how-to-create-a-select-query-that-would-join-two-databases">stackoverflow</a> provided the start of the journey of discovery with something called dblink.</p>

<h2>dblink to the rescue!</h2>

<p><a href="http://www.postgresql.org/docs/current/interactive/contrib-dblink-function.html">dblink</a> is a hidden gem of a extension that made doing a join across two databases (weather there local or remote) a total breeze. Firstly the extension needs to be installed on the database with the following command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">dblink</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once added to your database using it requires three pieces of information</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dblink</span><span class="p">(</span><span class="s1">&#39;CONNECTION STRING&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;QUERY STRING&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">AS</span> <span class="n">t</span><span class="p">(</span> <span class="n">CASTING</span> <span class="n">RESTULS</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Connection String</h2>

<p>I personally use this format of string as it allows easy access to both local and remote DBs.</p>

<pre><code>postgres://PG_USER:PG_PASSWORD@HOST:PORT/DATABSE_NAME'

eg

postgres://pguser:abcd@127.0.0.1:5432/test_db'
</code></pre>

<h2>Query String</h2>

<p>This is query you wish to run on the remote machine. It can be any valid SQL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="s1">&#39;SELECT title, price, category FROM products WHERE shop_id = 99&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Casting the results</h2>

<p>When the results from the query are returned to local machine postgres doesn&rsquo;t know the column types of the received result set and thus needs to be told about them</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">title</span> <span class="nb">varchar</span><span class="p">,</span> <span class="n">price</span> <span class="nb">int</span><span class="p">,</span> <span class="n">category</span> <span class="nb">varchar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Full call example</h2>

<p>So putting those three things together the final call would be</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">dblink</span><span class="p">(</span><span class="s1">&#39;postgres://pguser:abcd@127.0.0.1:5432/test_db&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;SELECT title, price, category FROM products WHERE shop_id = 99&#39;</span><span class="p">)</span>
</span><span class='line'>   <span class="k">AS</span> <span class="n">t</span><span class="p">(</span><span class="n">title</span> <span class="nb">varchar</span><span class="p">,</span> <span class="n">price</span> <span class="nb">int</span><span class="p">,</span> <span class="n">category</span> <span class="nb">varchar</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Allowing you to manipulate this results just as it they were from a local database table.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Shortcuts]]></title>
    <link href="http://jordanrs.github.io/blog/2013/09/23/vim-shortcuts/"/>
    <updated>2013-09-23T09:10:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/09/23/vim-shortcuts</id>
    <content type="html"><![CDATA[<h2>Vim Commands</h2>

<p>i = insert mode</p>

<p>h,j,k,l = move left, up, down, left
w = move from word to word
b = move back word to word
W = jumps the whole word
B = jusmps back a word to word</p>

<p>$ = go to end of the line
^ = go to the begining of the line
0 = goes to the very beginning</p>

<p>gg = goes to the begginig of the file
G = goes to the bottom of the file
{ } = jumps paragraphs</p>

<p>f = finds the first occurence of a string in the file
F = fins the first occurance of a string backward</p>

<p>number followed by comman (4dd) &ndash; deletes four lines</p>

<p>3gg = goes 3 lines from the top
:13 = goes to line 13
3 G = goes three lines from the bottom</p>

<hr />

<h2>Advanced Movement</h2>

<p>ctrl d &ndash; moves half screen down
ctrl u &ndash; moves half screen up
ctrl f &ndash; full screen forward
ctrl b &ndash; full screen backward</p>

<p>M &ndash; goes to middle of the window
H &ndash; goes to top of window
L &ndash; goes to last line of window
3L &ndash; goes three lines above bottom of window</p>

<p>zt &ndash; moves the line our cursor is on to the top
zb &ndash; moves the line to the botton
zz &ndash; moves the line to the middle</p>

<p>ma &ndash; saves cursor position to a register
&lsquo;a &ndash; goes directly to register a
&rsquo; &ndash; move between markers</p>

<hr />

<h2>Basic Editing</h2>

<p>X &ndash; deletes behind the cursor
x &ndash; delete whats under the cursor
dd &ndash; delete the line
dw &ndash; delete the word
db &ndash; delete revious word</p>

<p>cc &ndash; delete line and enter insert mode
cw &ndash; delete work and enter insert mode
cd &ndash; delete previous word and enter insert mode</p>

<p>ci&#8221; &ndash; changes whats inbetween two &ldquo;
ca&rdquo; &ndash; deletes everything inside the quot and the quote</p>

<hr />

<h2>Cut, Copy and Paste</h2>

<p>Every deleteion is a cut command, puts in a special registar for pasting later</p>

<p>p &ndash; pastes last thing in deletion cut register
P &ndash; pastes before the cursor
y &ndash; yank/copy somehting copy can be used with any familiar command
yw &ndash; copy word
yy &ndash; copy line</p>

<hr />

<h2>Search</h2>

<p>/search = starts searching for word search. it is also case sensitive
?search = looks backwards for the word search
set incsearch = sets incremental search on
set ignorecase = turns of case senestive search
set hlsearch = turns on highlight search
nohlsearch / noh = turns off highlight search
n = searchs mores. vim stores the last search
c/find = will delete from the cursor to find and then enter insert mode</p>

<p>vim search can use regexs</p>

<hr />

<h2>Search and Replace</h2>

<p>:s/pattern/replace/flags
:s &ndash; perfoms a substitutions replaces on first occurance by defaul
:s/vim/Vim &ndash; replaces vim for Vim
:%s/vim/Vim &ndash; replaces whole file with vim for Vim
:%s/vim/Vim/g &ndash; replaces whole file with vim for Vim globally</p>

<p>vim will use previous serach pattern
so can do :s//pattern
when using regex can use \ze or \zs to stop selection before or af</p>

<p>Visual mode &ndash; v
visual line mode &ndash; V</p>

<p>gv &ndash; reslects last selection</p>

<p>go to a bracket, enter visual mode hit % and that will find the corresponding</p>

<p>FLAGS</p>

<p>c = confirm, asks for confirmation for oeach occurence
i = insensitive
g = finds all occurances in a line</p>

<p>HELP</p>

<p>:help s &ndash; opens the help for a command</p>

<hr />

<h2>Macros and Register</h2>

<p>ctrl g &ndash; get file in fo</p>

<p>macros store a command pipeline that can be used over and over</p>

<p>qa &ndash; start recording a macro in register a
q &ndash; stops recroding
:registers / reg &ndash; shows the recorded registers
@a &ndash; runs macro in a register
@@ &ndash; runts the last macro ran again</p>

<hr />

<h2>Command Line in Vim</h2>

<p>:! &ndash; initalises comman from the shell then run command
:read !date &ndash; puts the oupt of shell into the file under cursor
:r !curl &mdash;silent URL &ndash; outputs the file into the buffer
you can take the selected text buffer feed it in to standard in and replace it with output</p>

<hr />

<h2>Navigating Between Buffers</h2>

<p>:ls &ndash; lists all active buffers for files in memory
:bn / bnext &ndash; next buffer
:bp / bprev &ndash; previous buffer
:b# &ndash; last buffer we visited
:bf &ndash; first buffer</p>

<p>:bd 14 &ndash; deletes buffer 14</p>

<hr />

<h2>Windows and Tabs</h2>

<p>Split windows</p>

<p>:vsplit / vs file_path &ndash; splits the
ctrl+w h/l = move between left right
ctrl+w H / L = move to the left / right most part
ctrl + w J/K = move to the bottom / top
ctrl + w +/&ndash; = increase/decrease window hight 1 row
ctrl + w </> = increase/decrease width by 1 column
ctrl + w = = auto resize windows equally
:q = clost a window buffer</p>

<p>:sb 2 = split buffer in memory
:vert sb = vetical split buffer in memory</p>

<p>Tabs</p>

<p>:tab e / tabedit file_path
:gt &ndash; move oen tab forward
:gT &ndash; move one tab backward</p>

<hr />

<h2>Graphical Vim</h2>

<p>set gfn &ndash; sets current font</p>

<hr />

<h2>Indents and Folds </h2>

<p>:set list &ndash; prnts lines/tabs/space</p>

<blockquote><blockquote><ul>
<li>indent of one tab
8>> &ndash; indents following 8 lines</li>
</ul>
</blockquote></blockquote>

<p>:set expandtab &ndash; sets soft tabs
:set noexpandtab &ndash; sets tabs normal
:set shiftwidth=3 &ndash; 3 spaces for one indentation
:set smartindent &ndash; sets smart indentation
:set softtabstop / sts 3</p>

<p>in visual mode &ndash;</p>

<p>gv &ndash; reselects last selection</p>

<blockquote><p>/&lt; &ndash; indents</p></blockquote>

<p>Auto indent
= on select texted auto indent
=3j auto indent next 2 lines
=G indents the whole file</p>

<p>In inset mode
tab = inserts
ctrl + t = indent forward
ctrl + d = indent back</p>

<p>Folding</p>

<p>manual folds
zf5j &ndash; fold the next 5 lines
zo &ndash; open fold
zO &ndash; open from cursor fown
zc &ndash; close everything from position up fold
zd &ndash; delete fold
zf% &ndash; folds the matching bracket
zi &ndash; inverts folding on/off</p>

<p>auto folding</p>

<p>set foldmethod/fdm &ndash; numberous options see help foldmethod
set fdm=sytax = fold baed on syntax
set fdm=marker = set a custom folder maker } for instace</p>

<hr />

<h2>.vimrc File</h2>

<p>:so % &ndash; source our current file</p>

<p>set nocompatible &ndash; sets vims way of doing things</p>

<p>allows file types to be detected than plugins and indentation set up based on those files</p>

<p>filetype on
filetype indent on
filetype  plugin on</p>

<p>let VARIAABLE &ndash; &ldquo;.&rdquo;
syntax enable</p>

<p>set ignorecase
set hlsearch
set autoindent
set fileencoding=utf-8
set encoding=utf-8
set backspace=indent.eol.start</p>

<p>set smartcase &ndash; perform smart searchs
gdefault &ndash; perform global replacments
set incsearch
set showmatch &ndash; highlight all matching parentheses</p>

<p>deals with how windows are auto sized
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999</p>

<p>set no/list &ndash; view all tabs and line endings
set guifont= &ndash; sets the font
set guioptions= add options
set guioptions-= remove options
set number &ndash; set line numbers
set visualbell &ndash; flash the screen over the bell
set cursoline &ndash; highlight line your in</p>

<p>set cc=80 &ndash; sets line at 80th column
set background=dark
colorschmeme solarized</p>

<p>au BufRead,BufNewFil *.ru setfiletype ruby</p>

<hr />

<h2>Mappings</h2>

<p>sequence of characters that triggers sequence of commands</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing Node.js]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/28/removing-node-dot-js/"/>
    <updated>2013-08-28T19:05:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/28/removing-node-dot-js</id>
    <content type="html"><![CDATA[<p>For when i cant find it, here is the best instructions i found for removing</p>

<ol>
<li>Go to /usr/local/lib and delete any node and node_modules</li>
<li>Go to /usr/local/include and delete any node and node_modules directory</li>
<li>If you installed with brew install node, then run brew uninstall node in your terminal</li>
<li>Check your Home directory for any &ldquo;local&rdquo; or &ldquo;lib&rdquo; or &ldquo;include&rdquo; folders, and delete any &ldquo;node&rdquo; or &ldquo;node_modules&rdquo; from there</li>
<li>Go to /usr/local/bin and delete any node executable</li>
</ol>


<p><a href="http://stackoverflow.com/questions/11177954/how-do-i-completely-uninstall-node-js-and-reinstall-from-beginning-mac-os-x">source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Jenkins with Chef for Rails Project]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/"/>
    <updated>2013-08-21T07:26:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project</id>
    <content type="html"><![CDATA[<p>There are numerous guides available on line for setting up a fresh install of Jenkins with numerous different configurations but i wanted to create a chef recipe that would give me a clean Jenkins install with my required project dependencies (excluding rvm) at the click of a button.</p>

<p>The reasons the excluding RVM in the chef process, even though the chef-rvm cookback is fantastic having used it before in the creation of a Rails stack is that i just could get system level RVM to play nice with Jenkins and user specific RVM (to the Jenkins user) to automatically install without asking for the Jenkins password. Better minds will probably be able to solve this issue but i opted for a different approach.</p>

<!-- more -->


<h1>The CookBook</h1>

<p>My build cookbook and recipes can be found over on GitHub at [URL]. It contains everything we require (except rvm) for building our rails apps, Postgres for the postgres C headers for the pg gem, a javascript runtime in the form of node.js for rails 3.1 and greater asset compilation, a web server for accessing Jenkins, libqt4 and Xvfb for headless running of our integration specs with capybara webkit.</p>

<ul>
<li>Clone or download the chef repositry from [URL]</li>
<li>add in your own .chef/knife.rb and .pem files or make sure they can connect to your chef server</li>
<li>run <code>berks install</code> and <code>berks upload</code> to collect together all the associated cookbooks then push them up to the hosted chef repo</li>
<li>run <code>rake install</code> to upload our custom cookbooks and roles</li>
<li>then create a new instance of EC2 that will automatically be built with our jenkins build recipes by running.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo
</span></code></pre></td></tr></table></div></figure>


<p><em>this command requires a few config options to be added to your knife file to achieve the brevity. I wrote about this in a previous post <a href="http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/">here</a></em></p>

<p>This final command will set about creating a new EC2 micro instance with Ubuntu 12.04 AMI in Europe and then install all the necessary packages for running our standard rails stack. It will also setup a reverse proxy for nginx so that jenkins will be available on on completeion at the EC2 instances Public DNS address.</p>

<p>If all goes well the instal takes around 20 minutes and at the end you should see a print out as such.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com Chef Client finished, 91 resources updated
</span><span class='line'>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span><span class='line'>
</span><span class='line'>Instance ID: i-XXXXXXXX
</span><span class='line'>Flavor: t1.micro
</span><span class='line'>Image: ami-7962730d
</span><span class='line'>Region: eu-west-1
</span><span class='line'>Availability Zone: eu-west-1a
</span><span class='line'>Security Groups: default
</span><span class='line'>Security Group Ids: default
</span><span class='line'>Tags: <span class="o">{</span><span class="s2">&quot;Name&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;i-XXXXXXXX&quot;</span><span class="o">}</span>
</span><span class='line'>SSH Key: chef-test
</span><span class='line'>Root Device Type: ebs
</span><span class='line'>Root Volume ID: vol-XXXXXXXX
</span><span class='line'>Root Device Name: /dev/sda1
</span><span class='line'>Root Device Delete on Terminate: <span class="nb">true</span>
</span><span class='line'>Public DNS Name: ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span><span class='line'>Public IP Address: XX.XXX.XXX.X
</span><span class='line'>Private DNS Name: ip-XX-XX-XXX-XXX.eu-west-1.compute.internal
</span><span class='line'>Private IP Address: XX.XX.XXX.XXX
</span><span class='line'>Environment: _default
</span><span class='line'>Run List: role<span class="o">[</span>jenkinsbuilder<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Copy your public DNS address <code>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com</code> paste into a browser, and you should be greated by jenkins loving face.</p>

<p><img src="http://jordanrs.github.io/images/post_images/21-8-2013-jenkins/jenkins-face.png" alt="Jenkins Welcome" /></p>

<h2>A few caveats</h2>

<ul>
<li><p>We need to change the <strong>HTTP_HOST</strong> value in <strong>/etc/default/jenkins</strong> to be <strong>127.0.0.1</strong> as it is set by default to the DNS Name which means the deamon doesnt work to reload the app with nginx front end.</p></li>
<li><p>Secondly we need to <code>jenkins ALL=(ALL) NOPASSWD:ALL</code> to /etc/sudoers so that Jenkins isn&rsquo;t asked for a password (jenkins password required for &lsquo;apt-get &mdash;quiet &mdash;yes update&rsquo;:)</p></li>
<li><p>Postgres extensions arent installed and any builds which use them will fail. So if your using an extension like hstore it needs to be activated and this <a href="https://gist.github.com/terryjray/3296171">gist</a> gives a good run down of the commands to run.</p></li>
</ul>


<h1>Building our Rails Project</h1>

<h2>Setting up RVM</h2>

<p>The instructions for installing rvm with can all be found with more detail at <a href="https://rvm.io/integration/jenkins">here</a>, so the below is mearly a quick overview of the commands i ran to get rvm set up.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>    sudo su -s /bin/bash jenkins <span class="c">#Loggin in with full terminal as jenkins </span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">cd</span> ~ <span class="c">#change to jenkins home dir</span>
</span><span class='line'>
</span><span class='line'>    <span class="se">\c</span>url -L https://get.rvm.io | bash <span class="c">#install RVM the opening slash is important and delibrate</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Add the following two lines to ~/.bashrc </span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[[</span> -s <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span>
</span><span class='line'>    <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$HOME</span>/.rvm/bin <span class="c"># Add RVM to PATH for scripting</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># exit the shell and log back in </span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">type </span>rvm | head -1 <span class="c"># should show rvm is a function</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># add the following flags to ~/.rvmrc</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">rvm_install_on_use_flag</span><span class="o">=</span>1
</span><span class='line'>    <span class="nv">rvm_project_rvmrc</span><span class="o">=</span>1
</span><span class='line'>    <span class="nv">rvm_gemset_create_on_use_flag</span><span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>


<p>Again more explanation can be found over at the rvm instruction pages. <a href="https://rvm.io/integration/jenkins">here</a></p>

<h2>Pulling from Heroku</h2>

<p>To pull from heroku ie use heroku as the SCM we need to add the generated SSH key to a user associated with the project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo su -s /bin/bash jenkins
</span><span class='line'>
</span><span class='line'><span class="nb">cd</span> ~
</span><span class='line'>
</span><span class='line'>cat ~/.ssh/id_rsa.pub
</span></code></pre></td></tr></table></div></figure>


<p>The output from the cat command needs to be copied and pasted into the ssh-keys for a user on heroku.com or via heroku cli <code>heroku keys:add ~/.ssh/id_rsa.pub</code></p>

<p>The next thing is to make sure heroku is added to jenkins <code>~/.ssh/known_hosts</code>, the easiest way to do this is just git clone one of the projects for user the key was just added to and type yes when asked about the host.</p>

<h1>Setting up Jenkins</h1>

<p>Now that Jenkins will boot up and we are ready to pull from our SCM provider its time to setup security, install some plugins and set some global config variables so make life easier.</p>

<h2>Security</h2>

<p>Jenkins security is pretty simple and the docs do a great job of demonstrating how to set up a standard username/password login system with you as the super user. There is no need for me to duplicate this so head over to <a href="https://wiki.jenkins-ci.org/display/JENKINS/Standard+Security+Setup">Jenkins Wiki</a> and follow their instructions.</p>

<h2>Plugins</h2>

<p>The following plugins are my standard goto&rsquo;s for a new jenkins install</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin"><strong>git</strong></a> &ndash; Adds git support to Jenkins SCM section. A global user name and email address will need to be configured in the global settings panel.</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup"><strong>thinbackup</strong></a> &ndash; Regularly backup global config and project configs</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin"><strong>chucknorris</strong></a> &ndash; Chuck Norris banter on failed and successful builds</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Ruby+metrics+plugin"><strong>rubyMetrics</strong></a> &ndash; Allows the interpretation of RCov coverage reports</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Heroku+Plugin"><strong>heroku</strong></a> &ndash; Interact with heroku</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin"><strong>email extension</strong></a> &ndash; Extends Jenkins built in e-mail.</li>
</ul>


<h1>Setting up the Rails Project</h1>

<h2>Getting good reports</h2>

<p>When running rails tests within Jenkins the output isn&rsquo;t formatted in such a way that Jenkins really knowns what to do with it, so a failed test run and a successful test run are seen as fundamentally the same thing. To alter this behaviour need to add the <strong>ci_reporter</strong> gem to to your projects gem file. The same applies to the standard code coverage gem <strong>simplecov</strong>, the output produced can be seen in the Jenkins workspace, but you dont get the nice tracking graphs. An easy way to fix this is with the <strong>simplecov-rcov</strong> gem which allows simplecovs output to be formatted like rocvs which can be picked up by the rubymetrics plugin in Jenkins.</p>

<p>All you need to do is add the following lines above SimpleCov.start</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov-rcov&#39;</span>
</span><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">formatter</span> <span class="o">=</span> <span class="ss">SimpleCov</span><span class="p">:</span><span class="ss">:Formatter</span><span class="o">::</span><span class="no">RcovFormatter</span>
</span><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="s1">&#39;rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>     <br/>
The best way to get the correct formatted output is to set up rake task using <code>RSpec::Core::RakeTask</code> in &lsquo;lib/tasks/spec.rake&rsquo; that allows you to run all specs with the command <code>rake all</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/core/rake_task&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;ci/reporter/rake/rspec&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">RSpec</span><span class="p">:</span><span class="ss">:Core</span><span class="o">::</span><span class="no">RakeTask</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:all</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;ci:setup:rspec&quot;</span><span class="o">]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>  <span class="n">t</span><span class="o">.</span><span class="n">pattern</span> <span class="o">=</span> <span class="s1">&#39;**/*_spec.rb&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Separate Environment</h2>

<p>The last thing i did was setup a new environment for the Jenkins user based of the default test environment. First I create a <code>config/environments/jenkins_test.rb</code>, add this to any bundler groups that test env was part of in config/application.rb and then leave out setting up a entry in <code>database.yml</code> as this will be done during the Jenkins build process</p>

<h1>Project Setup</h1>

<h2>Advanced Project Options</h2>

<p>Set up quiet time option in the build when using heroku deploy hooks as they can fire before the last commit is available</p>

<h2>Build Triggers</h2>

<p>Trigger builds remotely through heroku deploy hooks.</p>

<h2>Build</h2>

<p>The current stock build script for a rails project</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash </span>
</span><span class='line'>
</span><span class='line'><span class="c"># Jenkins is installed as a service account when its running builds so it isn&#39;t </span>
</span><span class='line'><span class="c"># using a login shell. So since RVM was installed to the user and is setup through .bashrc </span>
</span><span class='line'><span class="c"># this doesn&#39;t happen so we need to load RVM right after the shebang   </span>
</span><span class='line'>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$HOME/.rvm/scripts/rvm&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Set the global rails env</span>
</span><span class='line'><span class="nb">export </span><span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins
</span><span class='line'>
</span><span class='line'><span class="c"># Load RVM with a ruby and a gemset, if neither are present they will be installed</span>
</span><span class='line'>rvm use 2.0.0@brandtone
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'>bundle install
</span><span class='line'>
</span><span class='line'><span class="c"># Duplicate a stock database yml file and the change our database name</span>
</span><span class='line'>cp ~/database.yml config/database.yml
</span><span class='line'>sed -i <span class="s1">&#39;s/database_name/brandtone/g&#39;</span> config/database.yml
</span><span class='line'>
</span><span class='line'><span class="c"># Create if not present and migrate out DB</span>
</span><span class='line'>rake db:create <span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins_test
</span><span class='line'>rake db:migrate <span class="nv">RAILS_ENV</span><span class="o">=</span>jenkins_test
</span><span class='line'>
</span><span class='line'><span class="c"># run all tests in a virtual frame buffer thats auto numbered to prevent clashes</span>
</span><span class='line'>xvfb-run --auto-servernum bundle <span class="nb">exec </span>rake all
</span></code></pre></td></tr></table></div></figure>


<h2>Post Build Actions</h2>

<p>Standard Post Build Actions</p>

<ul>
<li>Activate Chuck Norris</li>
<li>Publish JUnit test result report</li>
<li>Publish RCov Report</li>
<li>Send Email Notifications</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serilisation, Preloading and SimpleCov]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/09/serilisation-preloading-and-simplecov/"/>
    <updated>2013-08-09T16:32:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/09/serilisation-preloading-and-simplecov</id>
    <content type="html"><![CDATA[<p><a href="http://alisdair.mcdiarmid.org/2013/02/02/fixing-rails-auto-loading-for-serialized-objects.html">Alisdair McDiarmid</a>  has a great write up on solving the problems of serialising and deserializing custom objects to yaml in rails whilst in development and getting around the <code>ArgumentError: undefined class/module UnknownClass</code> error that are thrown due to classes not being loaded.</p>

<p>The solution is to eager load classes and reload them each request to make sure that when YAML deserialization occurs the classes are present as usually this process doesnt trigger the default lazy loading of classes in development.</p>

<figure class='code'><figcaption><span>The solution looks like this</span><a href='http://alisdair.mcdiarmid.org/2013/02/02/fixing-rails-auto-loading-for-serialized-objects.html'>Source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Eager load all value objects, as they may be instantiated from</span>
</span><span class='line'><span class="c1"># YAML before the symbol is referenced</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">before_initialize</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>    <span class="n">app</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">paths</span><span class="o">.</span><span class="n">add</span> <span class="s1">&#39;app/values&#39;</span><span class="p">,</span> <span class="ss">:eager_load</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Reload cached/serialized classes before every request (in development</span>
</span><span class='line'><span class="c1"># mode) or on startup (in production mode)</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">to_prepare</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Dir</span><span class="o">[</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;app/values/*.rb&quot;</span><span class="p">))</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file</span><span class="o">|</span>
</span><span class='line'>        <span class="n">require_dependency</span> <span class="n">file</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">require_dependency</span> <span class="s1">&#39;article_cache&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Testing, SimpleCov and Missed Coverage</h2>

<p>This solution was great, it solves the loading issue but during development I noticed the lines of code covered by SimpleCov was reduced, looking into know issues on the SimpleCov <a href="https://github.com/colszowka/simplecov/issues/107">github one explained</a> the reason why files where missing. The above solution of preloading the classes for deserialization means that the files are already loaded in memory before SimpleCov initialises and thus cant be tracked by Ruby&rsquo;s built in coverage mechanism.</p>

<h2>Solution</h2>

<p>As of rails 3.1, objects can be serialised to JSON as well as YAML. While it requires the addition of two methods to the class in question it does mean the class doesn&rsquo;t need to be preloaded and thus allows the code coverage to be tracked.</p>

<p>Adding the following two methods in your class and the additional JSON option to serialize in the model file allows for objects to be reinitialised based on the stored data parameters saved as JSON in the database.</p>

<figure class='code'><figcaption><span>in the model file </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">serialize</span> <span class="ss">:column_name</span><span class="p">,</span> <span class="no">JSON</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Serializing and Deserializing with JSON</span><a href='http://stackoverflow.com/questions/4569329/serialize-ruby-object-to-json-and-back'>source</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">json_create</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
</span><span class='line'>  <span class="kp">new</span><span class="p">(</span><span class="o">*</span><span class="n">o</span><span class="o">[</span><span class="s1">&#39;data&#39;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="s1">&#39;json_class&#39;</span> <span class="o">=&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="s1">&#39;data&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="nb">id</span><span class="p">,</span> <span class="nb">name</span><span class="p">,</span> <span class="n">next_step</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Royal Baby Catifier]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/23/royal-baby-catifier/"/>
    <updated>2013-07-23T09:54:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/23/royal-baby-catifier</id>
    <content type="html"><![CDATA[<p>A quick, fun evening hacking up a Chrome extension. Sick of seeing articles about the royal baby? This extension removes the container and replaces it with a cat.</p>

<p><a href="https://chrome.google.com/webstore/detail/royal-baby-catifier/adjameoabcmbdobiafhhoclndepibfno">Chrome Web Store</a></p>

<p><img src="https://lh3.googleusercontent.com/0BF16NBbShToYIB8sSp49sKdFZR6wlWAQl8H7KN5_kEftx_3yvhJNCyPMOSF0RaBecRzTWrE3Q=s640-h400-e365-rw" alt="Cats" /></p>

<p><a href="https://github.com/jordanrs/royal-baby-catifier">Source</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacked 2013]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/22/hacked-2013/"/>
    <updated>2013-07-22T12:03:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/22/hacked-2013</id>
    <content type="html"><![CDATA[<p><a href="http://hacked.io">Hacked.oi</a> was utterly awesome. In the end myself, <a href="https://twitter.com/marcelloseri">Marcello Seri</a> and <a href="https://twitter.com/b3noxley">Ben Oxley</a> created <a href="https://www.hackerleague.org/hackathons/hacked/hacks/homeflux">homeFlux</a>, a realtime system for adapting light levels to match a desired intensity and also adjust colour values over time much like <a href="http://justgetflux.com/">flu.x</a>. Was awesome fun.</p>

<iframe width="560" height="315" src="http://jordanrs.github.io//www.youtube.com/embed/T_gPdTJkoM0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin Form Preview with Javascript FormData]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata/"/>
    <updated>2013-07-10T20:46:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata</id>
    <content type="html"><![CDATA[<p>One of my recent tasks has been to build a preview of a form submission into an existing application. Having done something similar in the past involving changing the forms action with javascript, ajax posting the form (including images), generating a preview, changing the form back blaa blaa blaa blaa blaaaaa. I wanted to find a cleaner way to a) deal with the preview and b) ajaxing blob data (image/files) and thanks to not having to support IE implemented the following procedure using FormData and XMLHttpRequest 2.</p>

<!-- more -->


<p>FormData is awesome, give it a form including blob data and it&rsquo;ll return an object that can be attached to $.ajax or standard XMLHttpRequest.send and all the caveats and nuiances of ajax forms disappear in the blink of an eye.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// something like</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="nx">FormData</span><span class="p">.</span><span class="k">new</span><span class="p">(</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/iwantdata&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">data</span><span class="o">:</span> <span class="nx">fd</span><span class="p">,</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
</span><span class='line'><span class="nx">ajax</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;POST&quot;</span><span class="p">,</span> <span class="s2">&quot;/iwantdata&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">ajax</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">fd</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>My stratergy then was simple, take more fieldset, clone it, wrap it in a formtag (all in memory), create the formdata object and away we go images and all. So my first attempt looked as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">buildFormData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$fieldset</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$clone</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#fieldset&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">({</span> <span class="nx">deepWithDataAndEvents</span><span class="o">:</span> <span class="kc">true</span><span class="p">});</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$form</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="err">&#39;</span><span class="o">&lt;</span><span class="nx">form</span> <span class="o">/&gt;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$clone</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">(</span><span class="nx">$form</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fd</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sendPreview</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">formData</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/iwantdata&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">data</span><span class="o">:</span> <span class="nx">formData</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">processData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">contentType</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="nx">weDidIt</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This worked great at first all the data was being submitted correctly excpet file fields. These werent being copied over at all due to the caveats of browser security and cloning file fields it seems. So instead of doing it all in memory, which would have been the ideal, I had to use the file fields in the DOM but didnt want to have to pull the form apart and put it back together. Even though the html specification has a big NO NO when it comes to nested form tags it is possible to create them with javascript and this is what i did to build my in place subsection FormData.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">buildFormData</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$fieldset</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">$form</span> <span class="o">=</span> <span class="nx">$fieldset</span><span class="p">.</span><span class="nx">wrap</span><span class="p">(</span><span class="s1">&#39;&lt;form /&gt;&#39;</span><span class="p">).</span><span class="nx">closest</span><span class="p">(</span><span class="s1">&#39;form&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">fd</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">(</span><span class="nx">$form</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'>  <span class="nx">$fieldset</span><span class="p">.</span><span class="nx">unwrap</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">fd</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">sendPreview</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">formData</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>   <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/iwantdata&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">type</span><span class="o">:</span> <span class="s2">&quot;POST&quot;</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">data</span><span class="o">:</span> <span class="nx">formData</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">processData</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>   <span class="nx">contentType</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="p">}).</span><span class="nx">done</span><span class="p">(</span><span class="nx">weDidIt</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not ideal but this solution was a simple way to create a FormData from a subset of fields on the fly which includes all the file field information also.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Facebook login and permissions with Capybara]]></title>
    <link href="http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara/"/>
    <updated>2013-06-01T10:27:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara</id>
    <content type="html"><![CDATA[<p>Having begun to use Capybara and Rspec quiet heavily there have been a few challenges that need to be overcome. One of these is that the applications I develop day to day are heavily intertwined with Facebook and user flow relies heavily on Facebook login and accepting permissions at various points throughout the application.</p>

<!-- more -->


<p>Outside of the Facebook chrome (the non iframed version of the application) its quite easy interact with these events as if we were a normal user.</p>

<p><strong>Use Facebook Test Users</strong></p>

<p>First go to your Facebook applications roles dashboard at <a href="https://developers.facebook.com/apps/">https://developers.facebook.com/apps/</a>[APPID]/roles and create some test users and if needed make them friends with one another. Take a note of there email, fbid and create a password for them.</p>

<p><strong>Capybara Settings</strong></p>

<p>Since Facebook is an external service we need to extend Capybaras default wait time incase its being slow and also change the host that the specs run under so that it matches the settings for our Facebook app.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default</span><span class="p">\</span><span class="n">_wait</span><span class="p">\</span><span class="n">_time</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="no">Settings</span><span class="o">.</span><span class="n">host</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Test User Factory</strong></p>

<p>The FactoryGirl gem provides a great way to create and manage test data based on rails models. FactoryGirl can even be used with things other than models so to keep my actual user model separate from my test users data I created a special TestUser class. By placing it in a subfolder of the support folder the default installation will load all files and sub folders at initialisations allowing us access to this special class in our tests.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/support/models/test_user.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TestUser</span>
</span><span class='line'>   <span class="kp">attr_accessor</span>  <span class="ss">:email</span><span class="p">,</span> <span class="ss">:password</span><span class="p">,</span> <span class="ss">:fbid</span><span class="p">,</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
With this class its then easily to make a test_user factory as you would a rails model factory. In this instance iv used a nested factory for additional test users with different states.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>   <span class="n">factory</span> <span class="ss">:test_user</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>     <span class="nb">name</span> <span class="s1">&#39;Bob Ameibdcaahgd Liangman&#39;</span>
</span><span class='line'>     <span class="n">fbid</span> <span class="s1">&#39;100005892102238&#39;</span>
</span><span class='line'>     <span class="n">email</span> <span class="s1">&#39;oyncoeh_liangman_1368123301@tfbnw.net&#39;</span>
</span><span class='line'>     <span class="n">password</span> <span class="s1">&#39;XXXX&#39;</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">factory</span> <span class="ss">:test_user_mark</span> <span class="k">do</span>
</span><span class='line'>       <span class="nb">name</span> <span class="s1">&#39;Mark Ameiehbaakf Wisemanstein&#39;</span>
</span><span class='line'>       <span class="n">fbid</span> <span class="s1">&#39;100005958231006&#39;</span>
</span><span class='line'>       <span class="n">email</span> <span class="s1">&#39;dqfaoxm_wisemanstein_13684123@tfbnw.net&#39;</span>
</span><span class='line'>       <span class="n">password</span> <span class="s1">&#39;XXXX&#39;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">factory</span> <span class="ss">:test_user_arabic</span> <span class="k">do</span>
</span><span class='line'>       <span class="nb">name</span> <span class="s1">&#39;Richard Amehgghdihei Changescu&#39;</span>
</span><span class='line'>       <span class="n">fbid</span> <span class="s1">&#39;100005877823859&#39;</span>
</span><span class='line'>       <span class="n">email</span> <span class="s1">&#39;lifczou_changescu_1368123920@tfbnw.net&#39;</span>
</span><span class='line'>       <span class="n">password</span> <span class="s1">&#39;XXXX&#39;</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using these tests users in a capybara spec only has one caveat. They must be created in memory using build since there isn&rsquo;t a database table for them to be saved to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:test_user_mark</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">FactoryGirl</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:test_user_mark</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Automating Facebook</strong></p>

<p>The following module is a collection of macros that take care of the Facebook login and permissions dialogues. It attempts to deal with the various possible flows that can happen when using login with Facebook depending on wether the user has logging in and is being asked for permissions in the same sequence or if the permission are taken at a different point. There is also some javascript macros for login the user out of Facebook and removing the app permissions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># spec/support/facebook_macros</span>
</span><span class='line'><span class="k">module</span> <span class="nn">FacebookMacros</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">complete_facebook_dialogues_on_click</span><span class="p">(</span><span class="n">selector</span><span class="p">,</span> <span class="n">test_user</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># until bookface version bumped to latest we have no way to know its ready so delay, not ideal</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">selector</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">window_handles</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">within_window</span><span class="p">(</span><span class="s1">&#39;Facebook&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">fill_in_facebook_form</span><span class="p">(</span><span class="n">test_user</span><span class="p">)</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">has_css?</span><span class="p">(</span><span class="s1">&#39;#loginbutton&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">accept_permissions_outside_facebook</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">fill_in_facebook_form</span><span class="p">(</span><span class="n">test_user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">test_user</span><span class="o">.</span><span class="n">email</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">fill_in</span><span class="p">(</span><span class="s1">&#39;pass&#39;</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">test_user</span><span class="o">.</span><span class="n">password</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#loginbutton&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_additional_permissions</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">window_handles</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">within_window</span><span class="p">(</span><span class="s1">&#39;Facebook&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">accept_permissions_outside_facebook</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">accept_permissions_outside_facebook</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//button[@name=&#39;__CONFIRM__&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">window_handles</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="ss">:xpath</span><span class="p">,</span> <span class="s2">&quot;//button[@name=&#39;__CONFIRM__&#39;]&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span> <span class="k">if</span> <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">window_handles</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">2</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">deauth_app</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">       FB.api(&quot;/me/permissions&quot;,&quot;DELETE&quot;, function(response){</span>
</span><span class='line'><span class="sx">         console.log(response)</span>
</span><span class='line'><span class="sx">       });</span>
</span><span class='line'><span class="sx">     }</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">logout</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">execute_script</span> <span class="sx">%Q{</span>
</span><span class='line'><span class="sx">      FB.logout(function(response) {</span>
</span><span class='line'><span class="sx">        // user is now logged out</span>
</span><span class='line'><span class="sx">      });</span>
</span><span class='line'><span class="sx">     }</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above module can be easily included in Rspec&rsquo;s configure block with the config.includes command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FacebookMacros</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example scenario using these macros. Its important that they are run with javascript enabled.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">scenario</span> <span class="s1">&#39;user import friends&#39;</span><span class="p">,</span> <span class="ss">:js</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">root_path</span>
</span><span class='line'>  <span class="n">complete_facebook_dialogues_on_click</span><span class="p">(</span><span class="s1">&#39;#auth_me&#39;</span><span class="p">,</span> <span class="n">test_user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_css</span><span class="p">(</span><span class="s1">&#39;#entry_step_1&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">home_dashboard_path</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">expect</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">find</span><span class="p">(</span><span class="s1">&#39;#add_events&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">click</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">accept_additional_permissions</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should_not</span> <span class="n">have_css</span><span class="p">(</span><span class="s1">&#39;#add_events&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_css</span><span class="p">(</span><span class="s1">&#39;.events_item&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># deal with additional perms</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">Event</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">logout</span>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">reset_session!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef From Scratch - Building a EC2 backed Rails Stack Part 1]]></title>
    <link href="http://jordanrs.github.io/blog/2013/05/26/Learning-Chef-From-Scratch---Building-a-EC2-backed-Rails-Stack-Part-1/"/>
    <updated>2013-05-26T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/05/26/Learning-Chef-From-Scratch&#8212;Building-a-EC2-backed-Rails-Stack-Part-1</id>
    <content type="html"><![CDATA[<p>Chef is a fantastic tool for automating the process bootstrapping a fresh server so that once you have got it running how you want, replicating that configuration and setup requires very little effort what so ever.</p>

<p>Chef has two different use cases, Chef server (wether that be hosted or private) or Chef Solo. Chef solo allows you to interact directly with the machine your wanting to administrate and is very useful for bootstrapping a vagrant image for instance. Chef Server offers a centralised place for you to push your configurations and recipes so that when working with multiple servers (known as nodes or chef clients) you don&rsquo;t have to update each one individually as each client can be set to poll to server for any updates.</p>

<p>For my first time using chef i through myself straight in at the deep end in that i wanted to put together a full working EC2 instance that would run my usual heroku stack (nginx, unicorn, ruby, rails and postgres). I opted for using Opscodes free Chef hosted plan for my Chef server and got straight to it.</p>

<!-- more -->


<h1>Getting Set Up</h1>

<p>First of head over to <a href="http://www.opscode.com">www.opscode.com</a> and sign up for a free account. There will be three files to download. Your user key, your organisation key and your preconfigured knife.rb file. Download these files and keep them safe for now, we will use them in just a second.</p>

<p>Next we need to get our bootstrapped Chef Repository, this is our blank slate to begin building up our server and its configuration. Grab a empty <a href="http://github.com/opscode/chef-repo/">Chef Repo</a> from opscodes git hub and clone it to where ever you desire.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git@github.com:opscode/chef-repo.git
</span></code></pre></td></tr></table></div></figure>


<p>Next we need to move our .pem and knife.rb files into a .chef folder in this repository. You will most likely have to make the .chef folder.</p>

<p><img src="http://jordanrs.github.io/images/post_images/23-05-26-chef/folder_layout.png" alt="Folder Layout" /></p>

<h1>Gem Time</h1>

<p>Now we have our directory structure in place we should install the gems we need to make the magic happen. A complete guide to setting up chef can be found <a href="http://docs.opscode.com/install_workstation.html">here</a> as I wont go into the details of installing ruby, rvm, bundler etc to enable the installation of gems.</p>

<p>The main gems needed are the <code>chef</code> and <code>knife-ec2</code> gems.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install chef
</span><span class='line'>gem install kinfe-ec2
</span></code></pre></td></tr></table></div></figure>


<h1>Creating a EC2 instance with knife</h1>

<p>A few prerequisites are needed before we can create instances with knife. First you will need a AWS account which is free and comes with a <a href="http://aws.amazon.com/free/">free usage tier for the first year</a>. Once setup you will need to include your amazon API key and secret into your knife.rb file</p>

<figure class='code'><figcaption><span>knife.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_access_key_id</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;AAAAAAAAAAAAAAAAAAA&quot;</span>
</span><span class='line'><span class="n">knife</span><span class="o">[</span><span class="ss">:aws_secret_access_key</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next set up your default security policy or an alternative one which we can specify when creating the instance, to allow access to port 22, 80 and 443. This is so HTTP, HTTPS and SSH can all be accessed on the created instance.</p>

<p>In the same dashboard go to key pairs panel and create a new security key. The file will automatically download and should be moved into your ~/.ssh folder and the permissions changed to 600 (chmod 600 ~/.ssh/AWS-KEY.pem)</p>

<p>Finally decided what operating system, location, storage and instance size you want. All of these factor into which AMI will be installed on our instance. For instance <a href="http://cloud-images.ubuntu.com/locator/ec2/">this site</a> put together by ubuntu gives you a list of all the different AMIs for the numerous combination of these factors with ubuntu as your base OS.</p>

<p>In my case i went for ami-7962730d which is a eu-west 32bit version of Ubuntu 12.04 for a micro instance.</p>

<p>We are now ready to create our instance using knife, the command to do that is quite large but I shall show you a few things you can move into the knife folder as defaults to make it more manageable</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># run this command to begin boot strapping our server.</span>
</span><span class='line'>
</span><span class='line'>knife ec2 server create -I ami-7962730d -f t1.micro -S knife -i ~/.ssh/AWS-KEY.pem --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</span></code></pre></td></tr></table></div></figure>


<p>If you chose a different security group other than the default you can specify it here with the -G &lsquo;group&rsquo; argument and the &mdash;ssh-user argument is ubuntu as that is the default user that comes with the AMI and is needed for us to be able to ssh in with.</p>

<p>All that happens now is a new instance is created and the OS is installed once complete chef automatically SSHs in to the new machine and install chef-client on the server, registers it on on chef server and checks to see if we have specified any roles or recipes, in this instance we haven&rsquo;t.</p>

<h2>Shortening the creation command</h2>

<p>Add the <strong>AWS-KEY.pem</strong> to your ssh agent means you can remove the <code>-i ~/.ssh/AWS-KEY.pem</code> from the command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-add ~/.ssh/AWS-KEY.pem
</span><span class='line'>
</span><span class='line'><span class="c"># Command now becomes</span>
</span><span class='line'>knife ec2 server create -I ami-7962730d -f t1.micro -S knife --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</span></code></pre></td></tr></table></div></figure>


<p>Add <code>knife[:aws_ssh_key_id] = "AWS-KEY"</code> to knife.rb and we can remove -S knife</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife ec2 server create -I ami-7962730d -f t1.micro --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</span></code></pre></td></tr></table></div></figure>


<p>And finally add availability_zone and region to knife.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife<span class="o">[</span>:availability_zone<span class="o">]</span>     <span class="o">=</span> <span class="s1">&#39;eu-west-1a&#39;</span>
</span><span class='line'>knife<span class="o">[</span>:region<span class="o">]</span>                <span class="o">=</span> <span class="s1">&#39;eu-west-1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>to produce the final command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife ec2 server create -I ami-7962730d -f t1.micro --ssh-user ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>After all its installation is done you should see a read out like so, make a note of the <strong>Instance ID</strong> as this is what chef uses to identify this node.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Instance ID: i-XXXXXXXX
</span><span class='line'>Flavor: t1.micro
</span><span class='line'>Image: ami-7962730d
</span><span class='line'>Region: eu-west-1
</span><span class='line'>Availability Zone: eu-west-1a
</span><span class='line'>Security Groups: default
</span><span class='line'>Tags: <span class="o">{</span><span class="s2">&quot;Name&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;i-XXXXXXXX&quot;</span><span class="o">}</span>
</span><span class='line'>SSH Key: chef-test
</span><span class='line'>
</span><span class='line'>Waiting <span class="k">for </span>instance..............................................
</span><span class='line'>Public DNS Name: ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span><span class='line'>Public IP Address: XX.XXX.XXX.X
</span><span class='line'>Private DNS Name: ip-XX-XX-XXX-XXX.eu-west-1.compute.internal
</span><span class='line'>Private IP Address: XX.XX.XXX.XXX
</span><span class='line'>
</span><span class='line'>Waiting <span class="k">for </span>sshd....done
</span><span class='line'>Bootstrapping Chef on ec2-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</span></code></pre></td></tr></table></div></figure>


<p>So now we have a node/client associated with our chef server we can begin building up our cookbooks to install our stack which i shall cover in <a href="http://jordanrs.github.io/blog/2013/06/18/learning-chef-from-scratch-building-a-ec2-backed-rails-stack-part-2/">Part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Guard & Spork for auto running of specs]]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/25/installing-guard-and-spork-for-auto-running-of-tests/"/>
    <updated>2013-04-25T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/25/installing-guard-and-spork-for-auto-running-of-tests</id>
    <content type="html"><![CDATA[<h2>Gemfile</h2>

<p>Install the following gems with <code>bundle install</code></p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">group</span> <span class="ss">:test_envs</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rspec-rails&#39;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.0&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;factory_girl_rails&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;faker&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capybara&#39;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.0.2&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 0.9.1&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;launchy&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># file system event triggers for ruby. See note at end about RVM </span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;rb-fsevent&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.3&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Notifications of test states, Requires Growl and growlnotify to be installed</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;growl&#39;</span><span class="p">,</span> <span class="s1">&#39;1.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Automated test running and speed imporvements</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-rspec&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-spork&#39;</span><span class="p">,</span> <span class="s1">&#39;1.2.0&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;childprocess&#39;</span><span class="p">,</span> <span class="s1">&#39;0.3.6&#39;</span><span class="c1"># this was due to errors appearing in 0.3.7 and higher</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;spork&#39;</span><span class="p">,</span> <span class="s1">&#39;0.9.2&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;debugger&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<h2>spec/spec_helper</h2>

<!-- more -->


<p>Edit spec/spec_helper.rb to look below.</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;spork&#39;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;development&#39;</span> <span class="p">?</span> <span class="s1">&#39;test&#39;</span> <span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39;_test&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/autorun&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s2">&quot;capybara/rspec&quot;</span>
</span><span class='line'><span class="c1">#uncomment the following line to use spork with the debugger</span>
</span><span class='line'><span class="c1"># require &#39;spork/ext/ruby-debug&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">prefork</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># if defined? Capybara::Webkit</span>
</span><span class='line'>  <span class="c1">#   Capybara.javascript_driver = :webkit</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">app_host</span> <span class="o">=</span> <span class="s1">&#39;http://&#39;</span> <span class="o">+</span> <span class="no">Settings</span><span class="o">.</span><span class="n">host</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="no">Capybara</span><span class="o">.</span><span class="n">always_include_port</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># if defined? Delayed</span>
</span><span class='line'>  <span class="c1">#   Delayed::Worker.delay_jobs = false</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Requires supporting ruby files with custom matchers and macros, etc,</span>
</span><span class='line'>  <span class="c1"># in spec/support/ and its subdirectories.</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">[</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;spec/support/**/*.rb&quot;</span><span class="p">)</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="nb">require</span> <span class="n">f</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">FactoryGirl</span><span class="p">:</span><span class="ss">:Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">extend</span> <span class="no">PaperclipMacros</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FacebookMacros</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="no">FriendcareBootstrapMacros</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ## Mock Framework</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># config.mock_with :mocha</span>
</span><span class='line'>    <span class="c1"># config.mock_with :flexmock</span>
</span><span class='line'>    <span class="c1"># config.mock_with :rr</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Remove this line if you&#39;re not using ActiveRecord or ActiveRecord fixtures</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">fixture_path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="o">::</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/spec/fixtures&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If true, the base class of anonymous controllers will be inferred</span>
</span><span class='line'>    <span class="c1"># automatically. This will be the default behavior in future versions of</span>
</span><span class='line'>    <span class="c1"># rspec-rails.</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">infer_base_class_for_anonymous_controllers</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Run specs in random order to surface order dependencies. If you find an</span>
</span><span class='line'>    <span class="c1"># order dependency and want to debug it, you can fix the order by providing</span>
</span><span class='line'>    <span class="c1"># the seed, which is printed after each run.</span>
</span><span class='line'>    <span class="c1">#     --seed 1234</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">order</span> <span class="o">=</span> <span class="s2">&quot;random&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># If you&#39;re not using ActiveRecord, or you&#39;d prefer not to run each of your</span>
</span><span class='line'>    <span class="c1"># examples within a transaction, remove the following line or assign false</span>
</span><span class='line'>    <span class="c1"># instead of true.</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">use_transactional_fixtures</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># to make sure that each time the test suite is run it is done so against a new </span>
</span><span class='line'>    <span class="c1"># database i use the database_cleaner gem. so add that to your test group in the gem file</span>
</span><span class='line'>    <span class="c1"># add set it up like so</span>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:suite</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">strategy</span> <span class="o">=</span> <span class="ss">:truncation</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">before</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">start</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="no">DatabaseCleaner</span><span class="o">.</span><span class="n">clean</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">QC</span>
</span><span class='line'>    <span class="ss">QC</span><span class="p">:</span><span class="ss">:Conn</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">raw_connection</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>.rspec</h2>

<figure class='code'><figcaption><span>.rspec</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">--</span><span class="nb">format</span> <span class="n">documentation</span> <span class="o">--</span><span class="n">color</span> <span class="o">--</span><span class="n">drb</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Guardfile</h2>

<p>Running run <code>guard init rspec</code> and <code>guard init spork</code> will produce a Guardfile similar to the one below. Not the additions of <code>cucumber: false,  test_unit: false, :wait =&gt; 45</code> to the spork call as leaving them out without test unit or cucumber configured can result in errors.</p>

<p>We also make an addition to the rspec guard call <code>:cli =&gt; '--drb'</code> so that it runs through spoke using distributed ruby</p>

<figure class='code'><figcaption><span>Guardfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># A sample Guardfile</span>
</span><span class='line'><span class="c1"># More info at https://github.com/guard/guard#readme</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_support/core_ext&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;spork&#39;</span><span class="p">,</span> <span class="ss">:rspec_env</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s1">&#39;RAILS_ENV&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sexyjordan_test&#39;</span> <span class="p">},</span> <span class="ss">cucumber</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span>  <span class="n">test_unit</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:wait</span> <span class="o">=&gt;</span> <span class="mi">45</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;config/application.rb&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;config/environment.rb&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^config/environments/.+\.rb$}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^config/initializers/.+\.rb$}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;Gemfile&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;Gemfile.lock&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># watch(&#39;test/test_helper.rb&#39;)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/support/&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="ss">:all_after_pass</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:cli</span> <span class="o">=&gt;</span> <span class="s1">&#39;--drb&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/.+_spec\.rb$}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^lib/(.+)\.rb$}</span><span class="p">)</span>     <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/lib/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;spec/spec_helper.rb&#39;</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Rails example</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/(.+)\.rb$}</span><span class="p">)</span>                           <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/(.*)(\.erb|\.haml)$}</span><span class="p">)</span>                 <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/controllers/(.+)_(controller)\.rb$}</span><span class="p">)</span>  <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="o">[</span><span class="s2">&quot;spec/routing/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_routing_spec.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">s/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span><span class="p">,</span> <span class="s2">&quot;spec/acceptance/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^spec/support/(.+)\.rb$}</span><span class="p">)</span>                  <span class="p">{</span> <span class="s2">&quot;spec&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;config/routes.rb&#39;</span><span class="p">)</span>                           <span class="p">{</span> <span class="s2">&quot;spec/routing&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="s1">&#39;app/controllers/application_controller.rb&#39;</span><span class="p">)</span>  <span class="p">{</span> <span class="s2">&quot;spec/controllers&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/models/(.+)\.rb$}</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/models/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/services/(.+)\.rb$}</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/services/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Capybara features specs</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{^app/views/(.+)/.*\.(erb|haml)$}</span><span class="p">)</span>          <span class="p">{</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span> <span class="s2">&quot;spec/features/</span><span class="si">#{</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">_spec.rb&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Testing with queue classic</h1>

<p>Using queue classic, spork and rspec. If the QC setup shares the rails connection to the database we need to add this to the each run command in spork</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Spork</span><span class="o">.</span><span class="n">each_run</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span> <span class="no">QC</span>
</span><span class='line'>    <span class="ss">QC</span><span class="p">:</span><span class="ss">:Conn</span><span class="o">.</span><span class="n">connection</span> <span class="o">=</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">raw_connection</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h1>FactoryGirl Cleaner Syntax</h1>

<p>Adding</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">configure</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">include</span> <span class="ss">FactoryGirl</span><span class="p">:</span><span class="ss">:Syntax</span><span class="o">::</span><span class="no">Methods</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Means we can now call build, create, createlist, withouth FactoryGirl infront</p>

<h1>Paperclip and factory girl together</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">define</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">factory</span> <span class="ss">:timeline_memory</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>     <span class="n">image</span> <span class="p">{</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:Test</span><span class="o">::</span><span class="no">UploadedFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;spec&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;test_memory.jpg&#39;</span><span class="p">),</span> <span class="s1">&#39;image/jpg&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Notes</h1>

<p>Auto detection didnt work with rvm and 1.9.2 straight away. Ruby had to be recompiled with an additional flag to deal with file system events the way we want. The fix is taken from <a href="https://github.com/guard/guard/wiki/Add-proper-Readline-support-to-Ruby-on-Mac-OS-X">here</a></p>

<h2>Using RVM</h2>

<p>You can use RVM to build your Ruby with GNU readline support. First install the readline package with RVM:</p>

<pre><code>$ rvm pkg install readline --verify-downloads 1
</code></pre>

<p>Then configure RVM to use the readline package by adding</p>

<pre><code>ruby_configure_flags=--with-readline-dir="$rvm_path/usr"
</code></pre>

<p>to <code>~/.rvm/user/db</code>. Finally you need to reinstall your Ruby of choice:</p>

<pre><code>$ rvm reinstall 1.9.3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Test Environments in Rails]]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/23/multiple-test-enviroments/"/>
    <updated>2013-04-23T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/23/multiple-test-enviroments</id>
    <content type="html"><![CDATA[<p>Multiple test enviorments allow for developers with different DB settings, gem desires to be able to setup and run the same test suite independently of one another.</p>

<!-- more -->


<p>Create the file <code>config/enviroments/jordan_test.rd</code> and copy into it the contents of <code>config/enviroments/test.rb</code>
Via command line from application root:  <code>cp config/environments/test.rb config/environments/jordan_test.rb</code></p>

<p>in config/database.yml add your DB settings (assumes using Postgres)</p>

<figure class='code'><figcaption><span>database.yml </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">jordan_test</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">adapter</span><span class="p">:</span> <span class="n">postgresql</span>
</span><span class='line'>  <span class="ss">encoding</span><span class="p">:</span> <span class="n">utf8</span>
</span><span class='line'>  <span class="ss">host</span><span class="p">:</span> <span class="n">localhost</span>
</span><span class='line'>  <span class="ss">database</span><span class="p">:</span> <span class="o">[</span><span class="n">project_name</span><span class="o">]</span><span class="n">_jordan_test</span>
</span><span class='line'>  <span class="ss">username</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">password</span><span class="p">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Create the new database</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake db:create:all
</span></code></pre></td></tr></table></div></figure>


<p>add environment to any :test specific gems or gem groups in your gem file</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:jordan_test</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1">#blaaaaa........</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>
or make a bundler group in application.rb so others envs can be added easier.</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Bundler</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># If you precompile assets before deploying to production, use this line</span>
</span><span class='line'>  <span class="no">Bundler</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="o">*</span><span class="no">Rails</span><span class="o">.</span><span class="n">groups</span><span class="p">(</span><span class="ss">:assets</span> <span class="o">=&gt;</span> <span class="sx">%w(development test steve cronin sexyjordan_test)</span><span class="p">,</span> <span class="ss">:test_envs</span> <span class="o">=&gt;</span> <span class="sx">%w(test sexyjordan_test)</span><span class="p">))</span>
</span><span class='line'>  <span class="c1"># If you want your assets lazily compiled in production, use this line</span>
</span><span class='line'>  <span class="c1"># Bundler.require(:default, :assets, Rails.env)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usual run rake <code>db:test:prepare</code> or <code>db:test:clone</code> instead possible to run <code>rake db:migrate RAILS_ENV=jordan_test</code> perhaps make an alias for this in your .bash_profile</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strong Parameters and Tolk Gem]]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/05/strong-parameters-and-tolk-gem/"/>
    <updated>2013-04-05T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/05/strong-parameters-and-tolk-gem</id>
    <content type="html"><![CDATA[<p>To get the tolk gem to work along side the Strong Parameters gem we need to apply a monkey patch to tolk</p>

<figure class='code'><figcaption><span>config/initalizers/tolk.rb    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Tolk</span><span class="p">:</span><span class="ss">:LocalesController</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>      <span class="ss">Tolk</span><span class="p">:</span><span class="ss">:Locale</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:tolk_locale</span><span class="o">].</span><span class="n">try</span><span class="p">(</span><span class="ss">:permit!</span><span class="p">))</span>
</span><span class='line'>      <span class="n">redirect_to</span> <span class="ss">:action</span> <span class="o">=&gt;</span> <span class="ss">:index</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a gem]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/21/making-a-gem/"/>
    <updated>2013-02-21T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/21/making-a-gem</id>
    <content type="html"><![CDATA[<p>As to not forget the process of packaging up a gem and putting it on my own hosting just follow these simple tests :&ndash;</p>

<!-- more -->


<p>1) Firstly make sure the <code>PROJECT_NAME.gemspec</code> file is up to date and you have updated the <code>version.rb</code> file to the correct version.</p>

<p>2) run the command</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem build mention-tagger.gemspec
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>rake build
</span></code></pre></td></tr></table></div></figure>


<p>that should put a gem file in the root directory with the name <code>PROJECT_NAME-VERSION.gem</code> or in <code>pkg/PROJECT_NAME-VERSION.gem</code></p>

<p>To publish to your own gem host</p>

<p>1) First set up geminabox as per these <a href="https://github.com/cwninja/geminabox">instructions</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install geminabox
</span></code></pre></td></tr></table></div></figure>


<p>2) then gem inabox <code>PROJECT_NAME-VERSION.gem</code></p>

<p>it&rsquo;ll ask for url</p>

<p>3) put in your gem host</p>

<p>and away she goes</p>

<h2>Get it straight from git</h2>

<p>Two ways</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="o">.</span> <span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/rails/rails.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># or equivalently</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">.</span> <span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="ss">:githib</span> <span class="o">=&gt;</span> <span class="s1">&#39;rails/rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>which is just <em>USERNAME/PROJECT_NAME</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin - Customising export links]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/12/activeadmin---customising-export-links/"/>
    <updated>2013-02-12T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/12/activeadmin&#8212;customising-export-links</id>
    <content type="html"><![CDATA[<p>When using active admin there doesn&rsquo;t seem to be an easy way to format the output of the JSON and XML export options like you can with the CSV option.</p>

<p>A nice patch by <a href="https://coderwall.com/p/qzlssg">David Collom</a> allows us to customise what is displayed rather then just hiding it in CSS. The patch is as follows and i just placed it at the top of one of my <code>admin/###.rb</code> files</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">ActiveAdmin</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">Views</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">PaginatedCollection</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">build_pagination_with_formats</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>        <span class="n">div</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="s2">&quot;index_footer&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">build_pagination</span>
</span><span class='line'>          <span class="n">div</span><span class="p">(</span><span class="n">page_entries_info</span><span class="p">(</span><span class="n">options</span><span class="p">)</span><span class="o">.</span><span class="n">html_safe</span><span class="p">,</span> <span class="ss">:class</span> <span class="o">=&gt;</span> <span class="s2">&quot;pagination_information&quot;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">build_download_format_links</span><span class="p">(</span><span class="o">[</span><span class="ss">:csv</span><span class="o">]</span><span class="p">)</span> <span class="k">unless</span> <span class="vi">@download_links</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>To customise what is displayed simplay change the array passing into <code>build_download_format_links()</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build_download_format_links</span><span class="p">(</span><span class="o">[</span><span class="ss">:csv</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="n">build_download_format_links</span><span class="p">(</span><span class="o">[</span><span class="ss">:csv</span><span class="p">,</span> <span class="ss">:json</span><span class="o">]</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3 Static Assets Group Policy]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/10/s3-static-assets-group-policy/"/>
    <updated>2013-02-10T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/10/s3-static-assets-group-policy</id>
    <content type="html"><![CDATA[<p>I always struggle to remember / find the group security policy for an S3 bucket to make all files available to the public.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;Version&quot;</span><span class="o">:</span> <span class="s2">&quot;2008-10-17&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;Statement&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;Sid&quot;</span><span class="o">:</span> <span class="s2">&quot;AllowPublicRead&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Effect&quot;</span><span class="o">:</span> <span class="s2">&quot;Allow&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Principal&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="s2">&quot;AWS&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="s2">&quot;Action&quot;</span><span class="o">:</span> <span class="s2">&quot;s3:GetObject&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;Resource&quot;</span><span class="o">:</span> <span class="s2">&quot;arn:aws:s3:::BUCKET-NAME/*&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
The only thing that can be changed is the BUCKET-NAME, leave all other aspects of the policy the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku Optimisations - Unicorn, S3 and Cloudfront]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/10/heroku-optimisations---unicorn-s3-and-cloudfront/"/>
    <updated>2013-02-10T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/10/heroku-optimisations&#8212;unicorn-s3-and-cloudfront</id>
    <content type="html"><![CDATA[<p>As part of my continued learnings as a rails developer I had some free time during the week and looked into optimising heroku to make my rails apps far more efficient and effective. When i tested unicorn it showed itself to be a awesomely efficient application server giving you far more bang for your buck on heroku. Heres a quick guide of how I set up unicorn and some additional optimisations using s3 and cloudfront to serve my files that will now become my default set up to get the most out of my dynos.</p>

<!-- more -->


<p><strong>Setting up Unicorn</strong></p>

<p><a href="https://github.com/defunkt/unicorn">Unicorn</a> is a HTTP server available for rails and other ruby frameworks that increase concurrency and the performance of your apps without having to increase the number of dynos (for a better explanation on the fundamentals of concurrency see this <a href="http://merbist.com/2011/02/22/concurrency-in-ruby-explained/">excellent post</a>). It does this by spawning extra processes to deal with incoming requests. It rocks, and showed itself to out perform the other popular ruby HTTP servers by a significant margin.</p>

<p>1) Install the Unicorn gem into your gem file</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) replace the current <code>web:</code> line in your procfile with</p>

<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">web</span><span class="p">:</span> <span class="n">bundle</span> <span class="nb">exec</span> <span class="n">unicorn_rails</span> <span class="o">-</span><span class="nb">p</span> <span class="vg">$PORT</span> <span class="o">-</span><span class="n">c</span> <span class="o">.</span><span class="n">/config</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">rb</span>
</span></code></pre></td></tr></table></div></figure>


<p>3) create a unicorn.rb file in the config directory with the following contents</p>

<figure class='code'><figcaption><span>config/unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># If you have a very small app you may be able to</span>
</span><span class='line'><span class="c1"># increase this, but in general 3 workers seems to</span>
</span><span class='line'><span class="c1"># work best</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Load your app into the master before forking</span>
</span><span class='line'><span class="c1"># workers for super-fast worker spawn times</span>
</span><span class='line'>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Immediately restart any workers that</span>
</span><span class='line'><span class="c1"># haven&#39;t responded within 30 seconds</span>
</span><span class='line'>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Replace with MongoDB or whatever</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">connection</span><span class="o">.</span><span class="n">disconnect!</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Disconnected from ActiveRecord&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If you are using Redis but not Resque, change this</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Resque</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">redis</span><span class="o">.</span><span class="n">quit</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Disconnected from Redis&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">sleep</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">after_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Replace with MongoDB or whatever</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="p">)</span>
</span><span class='line'>    <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">establish_connection</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Connected to ActiveRecord&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># If you are using Redis but not Resque, change this</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">defined?</span><span class="p">(</span><span class="no">Resque</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">redis</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;REDIS_URI&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">info</span><span class="p">(</span><span class="s1">&#39;Connected to Redis&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>4) finally set up logging so it use STDOUT in the application class of config/application.rb</p>

<figure class='code'><figcaption><span>config/application.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">STDOUT</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The additions of the config file and logger changes fix a few issues that can happen when workers are being spawned/terminated, when adding certain gems like new relic or redis and making sure we get logging information reported correctly.</p>

<p>Thats all there is to setting up unicorn on heroku. On the next deployment to heroku it should start the application running on unicorn with however many workers you specified. To check its working you can see it launch the unicorn server and spawn workers by doing <code>heroku logs --tail</code> whilst deploying.</p>

<p>Iv found that 3 workers works best as any higher you risk breaching heroku&rsquo;s 512mb memory limit per dyno, but you can experiment depending on your application size.</p>

<p><strong>Setting up s3 assets</strong></p>

<p>The easiest way to serve your assets from the cloud is to use the [asset sync gem] (<a href="https://github.com/rumblelabs/asset_sync">https://github.com/rumblelabs/asset_sync</a>). It simplifies dumping your assets to the cloud, when you run <code>rake assets:precompile</code> (done by default when pushing to heroku) your compiled assets will automatically sent over to the cloud, whether thats Amazon S3, Google Storage or Rackspace. The good news is its also very easy to set up. For this setup I am using S3 and assume you have already set up a bucket and added the correct group policy</p>

<p>1) Add the asset sync gem to your gem file</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;asset_sync&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) in <code>production.rb</code> add our asset host</p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s2">&quot;//</span><span class="si">#{</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOG_DIRECTORY&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">.s3.amazonaws.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We chose this url over the other style <code>//s3.amazonaws.com/#{ENV['FOG_DIRECTORY']}</code> as we can then have our bucket in any region &ndash; using the second style results in a 301 moved permanently due to reasons explained <a href="https://forums.aws.amazon.com/thread.jspa?threadID=17989">here</a>. There is one caveat however and that is that the bucket name cannot contain any periods (.&rsquo;s) as this will break the ssl certificates over https.</p>

<p>3) make sure the following are set in <code>production.rb</code></p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">digest</span> <span class="o">=</span> <span class="kp">true</span><span class="o">.</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="kp">true</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>4) One thing that we do is serve out staging assets and production assets from the same bucket. To do this we can add a asset prefix to our environments config file that declares the place the files should be stored within the bucket.</p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">prefix</span> <span class="o">=</span> <span class="s2">&quot;/production/assets&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>5) add in the following environment variables on heroku</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku config:add <span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span>xxxx
</span><span class='line'>heroku config:add <span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span>xxxx
</span><span class='line'>heroku config:add <span class="nv">FOG_DIRECTORY</span><span class="o">=</span>xxxx  <span class="c"># ( this is the bucket name )</span>
</span><span class='line'>heroku config:add <span class="nv">FOG_PROVIDER</span><span class="o">=</span>AWS
</span><span class='line'>
</span><span class='line'><span class="c"># and optionally:</span>
</span><span class='line'>
</span><span class='line'>heroku config:add <span class="nv">FOG_REGION</span><span class="o">=</span>eu-west-1
</span><span class='line'>heroku config:add <span class="nv">ASSET_SYNC_GZIP_COMPRESSION</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>heroku config:add <span class="nv">ASSET_SYNC_MANIFEST</span><span class="o">=</span><span class="nb">true</span>
</span><span class='line'>heroku config:add <span class="nv">ASSET_SYNC_EXISTING_REMOTE_FILES</span><span class="o">=</span>keep
</span></code></pre></td></tr></table></div></figure>


<p>6) finally we need to make sure these variables are available to heroku at asset compilation time so run this from the console in your app root directory</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>heroku labs:enable user-env-compile -a myapp
</span></code></pre></td></tr></table></div></figure>


<p><strong>Setting up CloudFront to serve our files even faster</strong></p>

<p>Using a CDN to serve our assets instead of S3 or even the app itself will help improve load times and decrease requests to our app as assets get delivered from a data centre closer to the end users location. Setting up a CloudFront distribution for use with our rails app requires no special configuration options so selecting our bucket and using all the default options will be fine. If you&rsquo;ve used a CDN before you may have had problems expiring files once you&rsquo;ve made changes to them. Thanks to the asset pipeline that comes with rails we don&rsquo;t need to worry about this due to the unique identifier hash that gets appended onto the end of the file name before its extension.</p>

<p>So after our distribution has completed downloading the assets from the bucket we will be given a CloudFront url. All we need to do once we have this url is change our asset host to point to this url</p>

<figure class='code'><figcaption><span>config/environments/production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">action_controller</span><span class="o">.</span><span class="n">asset_host</span> <span class="o">=</span> <span class="s2">&quot;d1aa907b1q1s7qd.cloudfront.net&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>  <br/>
Now when you make any changes to files and push them to heroku these new files with there unique hashes will get pushed to over to S3 and be different than the previous version. When the first user requests this new file from the CDN it wont be present so amazon is clever enough to attempt to fetch it from the bucket and save it to the CDN ready for the next person</p>

<p><strong>Setting up paperclip to use CloudFront</strong></p>

<p><a href="https://github.com/thoughtbot/paperclip">Paperclip</a> is great for dealing with file attachments and automatically saving things onto S3, but we could optimise this to use CloudFront instead. Its very easy to implement. Once your bucket is set up and files are being saved by paperclip to it, all thats needed is to change the following settings</p>

<p>1) Add in an :s3_host_alias</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:s3_host_alias</span> <span class="o">=&gt;</span> <span class="s1">&#39;d1aa907b1q1s7qd.cloudfront.net&#39;</span><span class="p">,</span>
</span></code></pre></td></tr></table></div></figure>


<p>2) Change :url property to use &ldquo;:s3_alias_url&rdquo;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="s2">&quot;:s3_alias_url&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>notice the symbol is wrapped in a string</p>

<p>And thats it, your uploaded content will now be served over CloudFront and not directly from s3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Year Project Video Demonstration]]></title>
    <link href="http://jordanrs.github.io/blog/2012/04/09/final-year-project-video-demonstration/"/>
    <updated>2012-04-09T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2012/04/09/final-year-project-video-demonstration</id>
    <content type="html"><![CDATA[<p>For any one who wishes to know what Music Technology at Edinburgh actually means? well this is what i created for my final year project, a literal creative fusion of music and technology! Enjoy!</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/DMitUrW-OXI" frameborder="0" > </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Kinect - Kinect SDK, XNA, Max/Msp and Voice Control]]></title>
    <link href="http://jordanrs.github.io/blog/2011/11/21/3D-kinect---kinect-SDK-XNA-maxmsp-and-voice-control/"/>
    <updated>2011-11-21T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2011/11/21/3D-kinect&#8212;kinect-SDK-XNA-maxmsp-and-voice-control</id>
    <content type="html"><![CDATA[<p>Its been a little quiet on the blog front, but many things have been programmed and I just haven&rsquo;t had the time to update this.</p>

<p>I just wanted to post a recent Kinect based development which is using the Kinect in a 3D environment</p>

<p>Check out the video below. Any questions or if you want the source just let me know</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/KS_6sXLS788" frameborder="0"> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Max/Msp to Kinect Via OSC for Offical Microsoft SDK]]></title>
    <link href="http://jordanrs.github.io/blog/2011/08/25/MaxMsp-to-Kinect-Via-OSC-for-Offical-Microsoft-SDK/"/>
    <updated>2011-08-25T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2011/08/25/MaxMsp-to-Kinect-Via-OSC-for-Offical-Microsoft-SDK</id>
    <content type="html"><![CDATA[<p><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 400px; height: 160px;" src="http://4.bp.blogspot.com/-N6x0K1PfpZ4/TlZYCw94AKI/AAAAAAAABYg/UZbQXeWYNKk/s400/screenshot.jpg" alt="" id="BLOGGER_PHOTO_ID_5644795987482902690" border="0" /></p>

<p>Today I finished the very first stages of my 4th year research project which was finding a way to take data from the Xbox Kinect and send it to Max/Msp. By using the <a href="http://opensoundcontrol.org/implementation/osc-net-v1-2">Ventuz OSC</a> C# wrapper i was able to pack all the X, Y, Z data for all the skeletal points into an OSC bundle and send that to Max where it was unpacked in the patch.</p>

<p>The data sent from the Kinect is the unchanged co-ordinate system of values in metres rangeing from -1 to 1.</p>

<p>That being said the data sent from Kinect to Max can be used by any device that is capable of reading OSC packets .The format of the OSC message is</p>

<p><code>/joint/skeleton_[1/2]/[joint] x, y, z</code></p>

<p>This is a simple implementation allows quick and easy access to the full power of the kinects skeletal tracking in windows for users of the offical SDK over OSC. I hope it can be of some use.</p>

<p><a href="https://sites.google.com/site/jordanrsblog/KinecttoMax.zip?attredirects=0&amp;d=1">Download Location 1</a></p>

<p><a href="http://www.mediafire.com/?ljoxdh01fdorgmd">MediaFire Mirror</a></p>
]]></content>
  </entry>
  
</feed>
