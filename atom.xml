<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2013-07-12T16:38:00+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin Form Preview with Javascript FormData]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata/"/>
    <updated>2013-07-10T20:46:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata</id>
    <content type="html"><![CDATA[<p>One of my recent tasks has been to build a preview of a form submission into an existing application. Having done something similar in the past involving changing the forms action with javascript, ajax posting the form (including images), generating a preview, changing the form back blaa blaa blaa blaa blaaaaa. I wanted to find a cleaner way to a) deal with the preview and b) ajaxing blob data (image/files) and thanks to not having to support IE implemented the following procedure using FormData and XMLHttpRequest 2.</p>

<p>FormData is awesome, give it a form including blob data and it&rsquo;ll return an object that can be attached to $.ajax or standard XMLHttpRequest.send and all the caveats and nuiances of ajax forms disappear in the blink of an eye.</p>

<pre><code>// something like
var fd = FormData.new( $('form')[0] );

$.ajax({
  ...
  url: '/iwantdata',
  data: fd, 
  ...
})

// or

var ajax = new XMLHttpRequest();
ajax.open("POST", "/iwantdata");
ajax.send(fd));
</code></pre>

<p>My stratergy then was simple, take more fieldset, clone it, wrap it in a formtag (all in memory), create the formdata object and away we go images and all. So my first attempt looked as follows.</p>

<pre><code>var buildFormData = function($fieldset){
  var $clone = $('#fieldset').clone({ deepWithDataAndEvents: true});
  var $form = $('&lt;form /&gt;).append($clone);
  var fd = new FormData($form[0])
  return fd
};

var sendPreview = function(formData){
  $.ajax({
   url: "/iwantdata",
   type: "POST",
   data: formData,
   processData: false,
   contentType: false,
  }).done(weDidIt);
};
</code></pre>

<p>This worked great at first all the data was being submitted correctly excpet file fields. These werent being copied over at all due to the caveats of browser security and cloning file fields it seems. So instead of doing it all in memory, which would have been the ideal, I had to use the file fields in the DOM but didnt want to have to pull the form apart and put it back together. Even though the html specification has a big NO NO when it comes to nested form tags it is possible to create them with javascript and this is what i did to build my in place subsection FormData.</p>

<pre><code>var buildFormData = function($fieldset){
  var $form = $fieldset.wrap('&lt;form /&gt;').closest('form');
  var fd = new FormData($form[0])
  $fieldset.unwrap();
  return fd
};

var sendPreview = function(formData){
  $.ajax({
   url: "/iwantdata",
   type: "POST",
   data: formData,
   processData: false,
   contentType: false,
  }).done(weDidIt);
};
</code></pre>

<p>Not ideal but this solution was a simple way to create a FormData from a subset of fields on the fly which includes all the file field information also.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Facebook login and permissions with Capybara]]></title>
    <link href="http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara/"/>
    <updated>2013-06-01T10:27:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara</id>
    <content type="html"><![CDATA[<p>Having begun to use Capybara and Rspec quiet heavily there have been a few challenges that need to be overcome. One of these is that the applications I develop day to day are heavily intertwined with Facebook and user flow relies heavily on Facebook login and accepting permissions at various points throughout the application.</p>

<!-- more -->


<p>Outside of the Facebook chrome (the non iframed version of the application) its quite easy interact with these events as if we were a normal user.</p>

<p><strong>Use Facebook Test Users</strong></p>

<p>First go to your Facebook applications roles dashboard at <a href="https://developers.facebook.com/apps/">https://developers.facebook.com/apps/</a>[APPID]/roles and create some test users and if needed make them friends with one another. Take a note of there email, fbid and create a password for them.</p>

<p><strong>Capybara Settings</strong></p>

<p>Since Facebook is an external service we need to extend Capybaras default wait time incase its being slow and also change the host that the specs run under so that it matches the settings for our Facebook app.</p>

<pre><code>Capybara.default\_wait\_time = 10
Capybara.app_host = 'http://' + Settings.host
</code></pre>

<p><strong>Test User Factory</strong></p>

<p>The FactoryGirl gem provides a great way to create and manage test data based on rails models. FactoryGirl can even be used with things other than models so to keep my actual user model separate from my test users data I created a special TestUser class. By placing it in a subfolder of the support folder the default installation will load all files and sub folders at initialisations allowing us access to this special class in our tests.</p>

<pre><code># spec/support/models/test_user.rb
class TestUser
   attr_accessor  :email, :password, :fbid, :name
end
</code></pre>

<p>With this class its then easily to make a test_user factory as you would a rails model factory. In this instance iv used a nested factory for additional test users with different states.</p>

<p> FactoryGirl.define do
   factory :test_user do |f|</p>

<pre><code> name 'Bob Ameibdcaahgd Liangman'
 fbid '100005892102238'
 email 'oyncoeh_liangman_1368123301@tfbnw.net'
 password 'XXXX'

 factory :test_user_mark do
   name 'Mark Ameiehbaakf Wisemanstein'
   fbid '100005958231006'
   email 'dqfaoxm_wisemanstein_13684123@tfbnw.net'
   password 'XXXX'
 end

 factory :test_user_arabic do
   name 'Richard Amehgghdihei Changescu'
   fbid '100005877823859'
   email 'lifczou_changescu_1368123920@tfbnw.net'
   password 'XXXX'
 end
</code></pre>

<p>   end
 end</p>

<p>Using these tests users in a capybara spec only has one caveat. They must be created in memory using build since there isn&rsquo;t a database table for them to be saved to</p>

<pre><code>let(:test_user_mark) do
  FactoryGirl.build(:test_user_mark)
end
</code></pre>

<p><strong>Automating Facebook</strong></p>

<p>The following module is a collection of macros that take care of the Facebook login and permissions dialogues. It attempts to deal with the various possible flows that can happen when using login with Facebook depending on wether the user has logging in and is being asked for permissions in the same sequence or if the permission are taken at a different point. There is also some javascript macros for login the user out of Facebook and removing the app permissions</p>

<pre><code># spec/support/facebook_macros
module FacebookMacros

  def complete_facebook_dialogues_on_click(selector, test_user)
    # until bookface version bumped to latest we have no way to know its ready so delay, not ideal
    sleep 1
    find("#{selector}").click
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      fill_in_facebook_form(test_user) if page.has_css?('#loginbutton')
      accept_permissions_outside_facebook
    end
  end

  def fill_in_facebook_form(test_user)
    fill_in('email', :with =&gt; "#{test_user.email}") 
    fill_in('pass', :with =&gt; "#{test_user.password}")
    find('#loginbutton').click
  end

  def accept_additional_permissions
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      accept_permissions_outside_facebook
    end
  end

  def accept_permissions_outside_facebook
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
  end

  def deauth_app
    sleep 1
    page.execute_script %Q{
       FB.api("/me/permissions","DELETE", function(response){
         console.log(response)
       });
     }
    sleep 1
  end

  def logout
    sleep 1
    page.execute_script %Q{
      FB.logout(function(response) {
        // user is now logged out
      });
     }
    sleep 1
  end

end
</code></pre>

<p>The above module can be easily included in Rspec&rsquo;s configure block with the config.includes command</p>

<pre><code>RSpec.configure do |config|

  ....
  config.include FacebookMacros
  ....

end
</code></pre>

<p>An example scenario using these macros. Its important that they are run with javascript enabled.</p>

<pre><code>scenario 'user import friends', :js =&gt; true do
  visit root_path  
  complete_facebook_dialogues_on_click('#auth_me', test_user)
  page.should have_css('#entry_step_1') 
  visit home_dashboard_path


  expect{

    sleep 2
    find('#add_events').click

    accept_additional_permissions
    sleep 2

    page.should_not have_css('#add_events')
    page.should have_css('.events_item')
    # deal with additional perms
  }.to change(Event, :count)


  logout
  Capybara.reset_session!
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Chef From Scratch - Building a EC2 backed Rails Stack Part 1]]></title>
    <link href="http://jordanrs.github.io/blog/2013/05/26/Learning-Chef-From-Scratch---Building-a-EC2-backed-Rails-Stack-Part-1/"/>
    <updated>2013-05-26T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/05/26/Learning-Chef-From-Scratch&#8212;Building-a-EC2-backed-Rails-Stack-Part-1</id>
    <content type="html"><![CDATA[<p>Chef is a fantastic tool for automating the process bootstrapping a fresh server so that once you have got it running how you want, replicating that configuration and setup requires very little effort what so ever.</p>

<p>Chef has two different use cases, Chef server (wether that be hosted or private) or Chef Solo. Chef solo allows you to interact directly with the machine your wanting to administrate and is very useful for bootstrapping a vagrant image for instance. Chef Server offers a centralised place for you to push your configurations and recipes so that when working with multiple servers (known as nodes or chef clients) you don&rsquo;t have to update each one individually as each client can be set to poll to server for any updates.</p>

<p>For my first time using chef i through myself straight in at the deep end in that i wanted to put together a full working EC2 instance that would run my usual heroku stack (nginx, unicorn, ruby, rails and postgres). I opted for using Opscodes free Chef hosted plan for my Chef server and got straight to it.</p>

<!-- more -->


<h1>Getting Set Up</h1>

<p>First of head over to <a href="http://www.opscode.com">www.opscode.com</a> and sign up for a free account. There will be three files to download. Your user key, your organisation key and your preconfigured knife.rb file. Download these files and keep them safe for now, we will use them in just a second.</p>

<p>Next we need to get our bootstrapped Chef Repository, this is our blank slate to begin building up our server and its configuration. Grab a empty <a href="http://github.com/opscode/chef-repo/">Chef Repo</a> from opscodes git hub and clone it to where ever you desire.</p>

<pre><code>git clone git@github.com:opscode/chef-repo.git
</code></pre>

<p>Next we need to move our .pem and knife.rb files into a .chef folder in this repository. You will most likely have to make the .chef folder.</p>

<p><img src="http://jordanrs.github.io/images/post_images/23-05-26-chef/folder_layout.png" alt="Folder Layout" /></p>

<h1>Gem Time</h1>

<p>Now we have our directory structure in place we should install the gems we need to make the magic happen. A complete guide to setting up chef can be found <a href="http://docs.opscode.com/install_workstation.html">here</a> as I wont go into the details of installing ruby, rvm, bundler etc to enable the installation of gems.</p>

<p>The main gems needed are the <code>chef</code> and <code>knife-ec2</code> gems.</p>

<pre><code>gem install chef
gem install kinfe-ec2
</code></pre>

<h1>Creating a EC2 instance with knife</h1>

<p>A few prerequisites are needed before we can create instances with knife. First you will need a AWS account which is free and comes with a <a href="http://aws.amazon.com/free/">free usage tier for the first year</a>. Once setup you will need to include your amazon API key and secret into your knife.rb file</p>

<pre><code>knife[:aws_access_key_id] = "AAAAAAAAAAAAAAAAAAA"
knife[:aws_secret_access_key] = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
</code></pre>

<p>Next set up your default security policy or an alternative one which we can specify when creating the instance, to allow access to port 22, 80 and 443. This is so HTTP, HTTPS and SSH can all be accessed on the created instance.</p>

<p>In the same dashboard go to key pairs panel and create a new security key. The file will automatically download and should be moved into your ~/.ssh folder and the permissions changed to 600 (chmod 600 ~/.ssh/AWS-KEY.pem)</p>

<p>Finally decided what operating system, location, storage and instance size you want. All of these factor into which AMI will be installed on our instance. For instance <a href="http://cloud-images.ubuntu.com/locator/ec2/">this site</a> put together by ubuntu gives you a list of all the different AMIs for the numerous combination of these factors with ubuntu as your base OS.</p>

<p>In my case i went for ami-7962730d which is a eu-west 32bit version of Ubuntu 12.04 for a micro instance.</p>

<p>We are now ready to create our instance using knife, the command to do that is quite large but I shall show you a few things you can move into the knife folder as defaults to make it more manageable</p>

<pre><code># run this command to begin boot strapping our server.

knife ec2 server create -I ami-7962730d -f t1.micro -S knife -i ~/.ssh/AWS-KEY.pem --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</code></pre>

<p>If you chose a different security group other than the default you can specify it here with the -G &lsquo;group&rsquo; argument and the &mdash;ssh-user argument is ubuntu as that is the default user that comes with the AMI and is needed for us to be able to ssh in with.</p>

<p>All that happens now is a new instance is created and the OS is installed once complete chef automatically SSHs in to the new machine and install chef-client on the server, registers it on on chef server and checks to see if we have specified any roles or recipes, in this instance we haven&rsquo;t.</p>

<h2>Shortening the creation command</h2>

<p>Add the <strong>AWS-KEY.pem</strong> to your ssh agent means you can remove the <code>-i ~/.ssh/AWS-KEY.pem</code> from the command</p>

<pre><code>ssh-add ~/.ssh/AWS-KEY.pem

# Command now becomes
knife ec2 server create -I ami-7962730d -f t1.micro -S knife --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</code></pre>

<p>Add <code>knife[:aws_ssh_key_id] = "AWS-KEY"</code> to knife.rb and we can remove -S knife</p>

<pre><code>knife ec2 server create -I ami-7962730d -f t1.micro --ssh-user ubuntu --region eu-west-1 -Z eu-west-1a
</code></pre>

<p>And finally add availability_zone and region to knife.rb</p>

<pre><code>knife[:availability_zone]     = 'eu-west-1a'
knife[:region]                = 'eu-west-1'
</code></pre>

<p>to produce the final command</p>

<pre><code>knife ec2 server create -I ami-7962730d -f t1.micro --ssh-user ubuntu
</code></pre>

<p>After all its installation is done you should see a read out like so, make a note of the <strong>Instance ID</strong> as this is what chef uses to identify this node.</p>

<pre><code>Instance ID: i-XXXXXXXX
Flavor: t1.micro
Image: ami-7962730d
Region: eu-west-1
Availability Zone: eu-west-1a
Security Groups: default
Tags: {"Name"=&gt;"i-XXXXXXXX"}
SSH Key: chef-test

Waiting for instance..............................................
Public DNS Name: ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
Public IP Address: XX.XXX.XXX.X
Private DNS Name: ip-XX-XX-XXX-XXX.eu-west-1.compute.internal
Private IP Address: XX.XX.XXX.XXX

Waiting for sshd....done
Bootstrapping Chef on ec2-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
</code></pre>

<p>So now we have a node/client associated with our chef server we can begin building up our cookbooks to install our stack which i shall cover in <a href="http://jordanrs.github.io/blog/2013/06/18/learning-chef-from-scratch-building-a-ec2-backed-rails-stack-part-2/">Part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Guard and Spork for auto running of specs']]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/25/installing-guard-and-spork-for-auto-running-of-tests/"/>
    <updated>2013-04-25T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/25/installing-guard-and-spork-for-auto-running-of-tests</id>
    <content type="html"><![CDATA[<h2>Gemfile</h2>

<p>Install the following gems with <code>bundle install</code></p>

<pre><code>group :test_envs do
  gem 'rspec-rails', "~&gt; 2.0"
  gem 'factory_girl_rails'
  gem 'faker'
  gem 'capybara', "~&gt; 2.0.2"
  gem 'database_cleaner', "~&gt; 0.9.1"
  gem 'launchy'

  # file system event triggers for ruby. See note at end about RVM 
  gem 'rb-fsevent', '0.9.3'

  # Notifications of test states, Requires Growl and growlnotify to be installed
  gem 'growl', '1.0.3'

  # Automated test running and speed imporvements
  gem 'guard-rspec'
  gem 'guard-spork', '1.2.0'
  gem 'childprocess', '0.3.6'# this was due to errors appearing in 0.3.7 and higher
  gem 'spork', '0.9.2'
  gem 'debugger'
end
</code></pre>

<h2>spec/spec_helper</h2>

<!-- more -->


<p>Edit spec/spec_helper to look below.</p>

<pre><code>require 'rubygems'
require 'spork'


ENV["RAILS_ENV"] = (ENV["RAILS_ENV"] == 'development' ? 'test' : ENV["RAILS_ENV"] + '_test')
require File.expand_path("../../config/environment", __FILE__)

require 'rspec/rails'
require 'rspec/autorun' 
require "capybara/rspec"
#uncomment the following line to use spork with the debugger
# require 'spork/ext/ruby-debug'

Spork.prefork do
  require 'database_cleaner'

  # if defined? Capybara::Webkit
  #   Capybara.javascript_driver = :webkit
  # end

  Capybara.default_wait_time = 10

  Capybara.app_host = 'http://' + Settings.host.split(':')[0] 
  Capybara.always_include_port = true

  # if defined? Delayed
  #   Delayed::Worker.delay_jobs = false
  # end

  # Requires supporting ruby files with custom matchers and macros, etc,
  # in spec/support/ and its subdirectories.
  Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}

  RSpec.configure do |config|

    config.include FactoryGirl::Syntax::Methods
    config.extend PaperclipMacros
    config.include FacebookMacros
    config.include FriendcareBootstrapMacros

    # ## Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr

    # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
    config.fixture_path = "#{::Rails.root}/spec/fixtures"

    # If true, the base class of anonymous controllers will be inferred
    # automatically. This will be the default behavior in future versions of
    # rspec-rails.
    config.infer_base_class_for_anonymous_controllers = false

    # Run specs in random order to surface order dependencies. If you find an
    # order dependency and want to debug it, you can fix the order by providing
    # the seed, which is printed after each run.
    #     --seed 1234
    config.order = "random"

    # If you're not using ActiveRecord, or you'd prefer not to run each of your
    # examples within a transaction, remove the following line or assign false
    # instead of true.
    config.use_transactional_fixtures = false

    # to make sure that each time the test suite is run it is done so against a new 
    # database i use the database_cleaner gem. so add that to your test group in the gem file
    # add set it up like so
    config.before(:suite) do
      DatabaseCleaner.strategy = :truncation
    end

    config.before(:each) do
      DatabaseCleaner.start
    end

    config.after(:each) do
      DatabaseCleaner.clean
    end
  end
end

Spork.each_run do

  if defined? QC
    QC::Conn.connection = ActiveRecord::Base.connection.raw_connection
  end
end
</code></pre>

<h2>.rspec</h2>

<p>add <code>--format documentation --color --drb to .rspec</code></p>

<h2>Guardfile</h2>

<p>Running run <code>guard init rspec</code> and <code>guard init spork</code> will produce a Guardfile similar to the one below. Not the additions of <code>cucumber: false,  test_unit: false, :wait =&gt; 45</code> to the spork call as leaving them out without test unit or cucumber configured can result in errors.</p>

<p>We also make an addition to the rspec guard call <code>:cli =&gt; '--drb'</code> so that it runs through spoke using distributed ruby</p>

<pre><code># A sample Guardfile
# More info at https://github.com/guard/guard#readme

require 'active_support/core_ext'

guard 'spork', :rspec_env =&gt; { 'RAILS_ENV' =&gt; 'sexyjordan_test' }, cucumber: false,  test_unit: false, :wait =&gt; 45 do
  watch('config/application.rb')
  watch('config/environment.rb')
  watch(%r{^config/environments/.+\.rb$})
  watch(%r{^config/initializers/.+\.rb$})
  watch('Gemfile')
  watch('Gemfile.lock')
  watch('spec/spec_helper.rb')
  # watch('test/test_helper.rb')
  watch('spec/support/')
end

guard 'rspec', :all_after_pass =&gt; false, :cli =&gt; '--drb' do
  watch(%r{^spec/.+_spec\.rb$})
  watch(%r{^lib/(.+)\.rb$})     { |m| "spec/lib/#{m[1]}_spec.rb" }
  watch('spec/spec_helper.rb')  { "spec" }

  # Rails example
  watch(%r{^app/(.+)\.rb$})                           { |m| "spec/#{m[1]}_spec.rb" }
  watch(%r{^app/(.*)(\.erb|\.haml)$})                 { |m| "spec/#{m[1]}#{m[2]}_spec.rb" }
  watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { |m| ["spec/routing/#{m[1]}_routing_spec.rb", "spec/#{m[2]}s/#{m[1]}_#{m[2]}_spec.rb", "spec/acceptance/#{m[1]}_spec.rb"] }
  watch(%r{^spec/support/(.+)\.rb$})                  { "spec" }
  watch('config/routes.rb')                           { "spec/routing" }
  watch('app/controllers/application_controller.rb')  { "spec/controllers" }

  watch(%r{^app/models/(.+)\.rb$}) {|m| "spec/models/#{m[1]}_spec.rb" }
  watch(%r{^app/services/(.+)\.rb$}) {|m| "spec/services/#{m[1]}_spec.rb" }

  # Capybara features specs
  watch(%r{^app/views/(.+)/.*\.(erb|haml)$})          { |m| "spec/features/#{m[1]}_spec.rb" }


end
</code></pre>

<h1>Testing with queue classic</h1>

<p>Using queue classic, spork and rspec. If the QC setup shares the rails connection to the database we need to add this to the each run command in spork</p>

<pre><code>Spork.each_run do
  if defined? QC
    QC::Conn.connection = ActiveRecord::Base.connection.raw_connection
  end
end
</code></pre>

<h1>FactoryGirl Cleaner Syntax</h1>

<p>Adding</p>

<pre><code>RSpec.configure do |config|
  config.include FactoryGirl::Syntax::Methods
end
</code></pre>

<p>Means we can now call build, create, createlist, withouth FactoryGirl infront</p>

<h1>Paperclip and factory girl together</h1>

<pre><code>FactoryGirl.define do
  factory :timeline_memory do |f|
     image { Rack::Test::UploadedFile.new(Rails.root.join('spec', 'assets', 'test_memory.jpg'), 'image/jpg') }
  end
end
</code></pre>

<h1>Notes</h1>

<p>Auto detection didnt work with rvm and 1.9.2 straight away. Ruby had to be recompiled with an additional flag to deal with file system events the way we want. The fix is taken from <a href="https://github.com/guard/guard/wiki/Add-proper-Readline-support-to-Ruby-on-Mac-OS-X">here</a></p>

<h2>Using RVM</h2>

<p>You can use RVM to build your Ruby with GNU readline support. First install the readline package with RVM:</p>

<pre><code>$ rvm pkg install readline --verify-downloads 1
</code></pre>

<p>Then configure RVM to use the readline package by adding</p>

<pre><code>ruby_configure_flags=--with-readline-dir="$rvm_path/usr"
</code></pre>

<p>to <code>~/.rvm/user/db</code>. Finally you need to reinstall your Ruby of choice:</p>

<pre><code>$ rvm reinstall 1.9.3
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multiple Test Environments in Rails]]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/23/multiple-test-enviroments/"/>
    <updated>2013-04-23T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/23/multiple-test-enviroments</id>
    <content type="html"><![CDATA[<p>Create the file <code>config/enviroments/jordan_test.rd</code> and copy into it the contents of <code>config/enviroments/test.rb</code>
Via command line from application root:  <code>cp config/environments/test.rb config/environments/jordan_test.rb</code></p>

<p>in config/database.yml add your DB settings (assumes using Postgres)</p>

<pre><code>jordan_test:
  adapter: postgresql
  encoding: utf8
  host: localhost
  database: [project_name]_jordan_test
  username: 
  password: 
</code></pre>

<p>Create the new database</p>

<pre><code>rake db:create:all
</code></pre>

<p>add environment to any :test specific gems or gem groups in your gem file</p>

<pre><code>group :test, :jordan_test do
    #blaaaaa........
end
</code></pre>

<p>or make a bundler group in application.rb so others envs can be added easier.</p>

<pre><code>if defined?(Bundler)
  # If you precompile assets before deploying to production, use this line
  Bundler.require(*Rails.groups(:assets =&gt; %w(development test steve cronin sexyjordan_test), :test_envs =&gt; %w(test sexyjordan_test)))
  # If you want your assets lazily compiled in production, use this line
  # Bundler.require(:default, :assets, Rails.env)
end   
</code></pre>

<p>Usual run rake <code>db:test:prepare</code> or <code>db:test:clone</code> instead possible to run <code>rake db:migrate RAILS_ENV=jordan_test</code> perhaps make an alias for this in your .bash_profile</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strong Parameters and Tolk Gem]]></title>
    <link href="http://jordanrs.github.io/blog/2013/04/05/strong-parameters-and-tolk-gem/"/>
    <updated>2013-04-05T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/04/05/strong-parameters-and-tolk-gem</id>
    <content type="html"><![CDATA[<p>To get the tolk gem to work along side the Strong Parameters gem we need to apply a monkey patch to tolk</p>

<pre><code>in config/initalizers/tolk.rb

Tolk::LocalesController.class_eval do  
    def create
      Tolk::Locale.create!(params[:tolk_locale].try(:permit!))
      redirect_to :action =&gt; :index
    end
end
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a gem]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/21/making-a-gem/"/>
    <updated>2013-02-21T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/21/making-a-gem</id>
    <content type="html"><![CDATA[<p>As to not forget the process of packaging up a gem and putting it on my own hosting just follow these simple tests :&ndash;</p>

<p>1) Firstly make sure the <code>PROJECT_NAME.gemspec</code> file is up to date and you have updated the <code>version.rb</code> file to the correct version.</p>

<p>2) run the command <code>gem build mention-tagger.gemspec</code> or <code>rake build</code>
that should put a gem file in the root directory with the name <code>PROJECT_NAME-VERSION.gem</code> or in <code>pkg/PROJECT_NAME-VERSION.gem</code></p>

<p>To publish to your own gem host</p>

<p>1) First set up geminabox as per these <a href="https://github.com/cwninja/geminabox">instructions</a></p>

<ul>
<li>gem install geminabox</li>
</ul>


<p>2) then gem inabox <code>PROJECT_NAME-VERSION.gem</code></p>

<p>it&rsquo;ll ask for url</p>

<p>3) put in your gem host</p>

<p>and away she goes</p>

<h2>Get it straight from git</h2>

<p>Two ways</p>

<ol>
<li>gem &lsquo;rails&rsquo;, :git => &lsquo;git://github.com/rails/rails.git&rsquo;</li>
</ol>


<p>or equivalently</p>

<ol>
<li>gem &lsquo;rails&rsquo;, :githib => &lsquo;rails/rails&rsquo;</li>
</ol>


<p>which is just <em>USERNAME/PROJECT_NAME</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin - Customising export links]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/12/activeadmin---customising-export-links/"/>
    <updated>2013-02-12T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/12/activeadmin&#8212;customising-export-links</id>
    <content type="html"><![CDATA[<p>When using active admin there doesn&rsquo;t seem to be an easy way to format the output of the JSON and XML export options like you can with the CSV option.</p>

<p>A nice patch by <a href="https://coderwall.com/p/qzlssg">David Collom</a> allows us to customise what is displayed rather then just hiding it in CSS. The patch is as follows and i just placed it at the top of one of my <code>admin/###.rb</code> files</p>

<pre><code>module ActiveAdmin
  module Views
    class PaginatedCollection
      def build_pagination_with_formats(options)
        div :id =&gt; "index_footer" do
          build_pagination
          div(page_entries_info(options).html_safe, :class =&gt; "pagination_information")
          build_download_format_links([:csv]) unless @download_links == false
        end
      end
    end
  end
end
</code></pre>

<p>To customise what is displayed simplay change the array passing into <code>build_download_format_links()</code></p>

<pre><code>build_download_format_links([:csv]) 
build_download_format_links([:csv, :json])
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3 Static Assets Group Policy]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/10/s3-static-assets-group-policy/"/>
    <updated>2013-02-10T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/10/s3-static-assets-group-policy</id>
    <content type="html"><![CDATA[<p>I always struggle to remember / find the group security policy for an S3 bucket to make all files available to the public.</p>

<pre><code>{
    "Version": "2008-10-17",
    "Statement": [
        {
            "Sid": "AllowPublicRead",
            "Effect": "Allow",
            "Principal": {
                "AWS": "*"
            },
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::BUCKET-NAME/*"
        }
    ]
}
</code></pre>

<p>The only thing that can be changed is the BUCKET-NAME, leave all other aspects of the policy the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heroku Optimisations - Unicorn, S3 and Cloudfront]]></title>
    <link href="http://jordanrs.github.io/blog/2013/02/10/heroku-optimisations---unicorn-s3-and-cloudfront/"/>
    <updated>2013-02-10T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2013/02/10/heroku-optimisations&#8212;unicorn-s3-and-cloudfront</id>
    <content type="html"><![CDATA[<p>As part of my continued learnings as a rails developer I had some free time during the week and looked into optimising heroku to make my rails apps far more efficient and effective. When i tested unicorn it showed itself to be a awesomely efficient application server giving you far more bang for your buck on heroku. Heres a quick guide of how I set up unicorn and some additional optimisations using s3 and cloudfront to serve my files that will now become my default set up to get the most out of my dynos.</p>

<p><strong>Setting up Unicorn</strong></p>

<p><a href="https://github.com/defunkt/unicorn">Unicorn</a> is a HTTP server available for rails and other ruby frameworks that increase concurrency and the performance of your apps without having to increase the number of dynos (for a better explanation on the fundamentals of concurrency see this <a href="http://merbist.com/2011/02/22/concurrency-in-ruby-explained/">excellent post</a>). It does this by spawning extra processes to deal with incoming requests. It rocks, and showed itself to out perform the other popular ruby HTTP servers by a significant margin.</p>

<p>1) Install the Unicorn gem into your gem file</p>

<pre><code>gem 'unicorn'
</code></pre>

<p>2) replace the current <code>web:</code> line in your procfile with</p>

<pre><code>web: bundle exec unicorn_rails -p $PORT -c ./config/unicorn.rb
</code></pre>

<p>3) create a unicorn.rb file in the config directory with the following contents</p>

<pre><code># If you have a very small app you may be able to
# increase this, but in general 3 workers seems to
# work best

worker_processes 3

# Load your app into the master before forking
# workers for super-fast worker spawn times

preload_app true

# Immediately restart any workers that
# haven't responded within 30 seconds

timeout 30

before_fork do |server, worker|

  # Replace with MongoDB or whatever

  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
    Rails.logger.info('Disconnected from ActiveRecord')
  end

  # If you are using Redis but not Resque, change this

  if defined?(Resque)
    Resque.redis.quit
    Rails.logger.info('Disconnected from Redis')
  end

  sleep 1
end

after_fork do |server, worker|

  # Replace with MongoDB or whatever

  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
    Rails.logger.info('Connected to ActiveRecord')
  end

  # If you are using Redis but not Resque, change this

  if defined?(Resque)
    Resque.redis = ENV['REDIS_URI']
    Rails.logger.info('Connected to Redis')
  end
end
</code></pre>

<p>4) finally set up logging so it use STDOUT in the application class of config/application.rb</p>

<pre><code>config.logger = Logger.new(STDOUT)
</code></pre>

<p>The additions of the config file and logger changes fix a few issues that can happen when workers are being spawned/terminated, when adding certain gems like new relic or redis and making sure we get logging information reported correctly.</p>

<p>Thats all there is to setting up unicorn on heroku. On the next deployment to heroku it should start the application running on unicorn with however many workers you specified. To check its working you can see it launch the unicorn server and spawn workers by doing <code>heroku logs --tail</code> whilst deploying.</p>

<p>Iv found that 3 workers works best as any higher you risk breaching heroku&rsquo;s 512mb memory limit per dyno, but you can experiment depending on your application size.</p>

<p><strong>Setting up s3 assets</strong></p>

<p>The easiest way to serve your assets from the cloud is to use the [asset sync gem] (<a href="https://github.com/rumblelabs/asset_sync">https://github.com/rumblelabs/asset_sync</a>). It simplifies dumping your assets to the cloud, when you run <code>rake assets:precompile</code> (done by default when pushing to heroku) your compiled assets will automatically sent over to the cloud, whether thats Amazon S3, Google Storage or Rackspace. The good news is its also very easy to set up. For this setup I am using S3 and assume you have already set up a bucket and added the correct group policy</p>

<p>1) Add the asset sync gem to your gem file</p>

<pre><code>group :assets do

.....
  gem 'asset_sync'
.....

end
</code></pre>

<p>2) in <code>production.rb</code> add our asset host</p>

<pre><code>config.action_controller.asset_host = "//#{ENV['FOG_DIRECTORY']}.s3.amazonaws.com"
</code></pre>

<p>We chose this url over the other style <code>//s3.amazonaws.com/#{ENV['FOG_DIRECTORY']}</code> as we can then have our bucket in any region &ndash; using the second style results in a 301 moved permanently due to reasons explained <a href="https://forums.aws.amazon.com/thread.jspa?threadID=17989">here</a>. There is one caveat however and that is that the bucket name cannot contain any periods (.&rsquo;s) as this will break the ssl certificates over https.</p>

<p>3) make sure the following are set in <code>production.rb</code></p>

<pre><code>config.assets.digest is set to true.
config.assets.enabled is set to true.
</code></pre>

<p>4) One thing that we do is serve out staging assets and production assets from the same bucket. To do this we can add a asset prefix to our environments config file that declares the place the files should be stored within the bucket.</p>

<pre><code>config.assets.prefix = "/production/assets"
</code></pre>

<p>5) add in the following environment variables on heroku</p>

<pre><code>heroku config:add AWS_ACCESS_KEY_ID=xxxx
heroku config:add AWS_SECRET_ACCESS_KEY=xxxx
heroku config:add FOG_DIRECTORY=xxxx  # ( this is the bucket name )
heroku config:add FOG_PROVIDER=AWS

# and optionally:

heroku config:add FOG_REGION=eu-west-1
heroku config:add ASSET_SYNC_GZIP_COMPRESSION=true
heroku config:add ASSET_SYNC_MANIFEST=true
heroku config:add ASSET_SYNC_EXISTING_REMOTE_FILES=keep
</code></pre>

<p>6) finally we need to make sure these variables are available to heroku at asset compilation time so run this from the console in your app root directory</p>

<pre><code>heroku labs:enable user-env-compile -a myapp
</code></pre>

<p><strong>Setting up CloudFront to serve our files even faster</strong></p>

<p>Using a CDN to serve our assets instead of S3 or even the app itself will help improve load times and decrease requests to our app as assets get delivered from a data centre closer to the end users location. Setting up a CloudFront distribution for use with our rails app requires no special configuration options so selecting our bucket and using all the default options will be fine. If you&rsquo;ve used a CDN before you may have had problems expiring files once you&rsquo;ve made changes to them. Thanks to the asset pipeline that comes with rails we don&rsquo;t need to worry about this due to the unique identifier hash that gets appended onto the end of the file name before its extension.</p>

<p>So after our distribution has completed downloading the assets from the bucket we will be given a CloudFront url. All we need to do once we have this url is change our asset host to point to this url</p>

<pre><code>config.action_controller.asset_host = "d1aa907b1q1s7qd.cloudfront.net"
</code></pre>

<p>Now when you make any changes to files and push them to heroku these new files with there unique hashes will get pushed to over to S3 and be different than the previous version. When the first user requests this new file from the CDN it wont be present so amazon is clever enough to attempt to fetch it from the bucket and save it to the CDN ready for the next person</p>

<p><strong>Setting up paperclip to use CloudFront</strong></p>

<p><a href="https://github.com/thoughtbot/paperclip">Paperclip</a> is great for dealing with file attachments and automatically saving things onto S3, but we could optimise this to use CloudFront instead. Its very easy to implement. Once your bucket is set up and files are being saved by paperclip to it, all thats needed is to change the following settings</p>

<p>1) Add in an :s3_host_alias</p>

<pre><code>:s3_host_alias =&gt; 'd1aa907b1q1s7qd.cloudfront.net',
</code></pre>

<p>2) Change :url property to use &ldquo;:s3_alias_url&rdquo;</p>

<pre><code>:url =&gt; ":s3_alias_url"
</code></pre>

<p>notice the symbol is wrapped in a string</p>

<p>And thats it, your uploaded content will now be served over CloudFront and not directly from s3</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Final Year Project Video Demonstration]]></title>
    <link href="http://jordanrs.github.io/blog/2012/04/09/final-year-project-video-demonstration/"/>
    <updated>2012-04-09T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2012/04/09/final-year-project-video-demonstration</id>
    <content type="html"><![CDATA[<p>For any one who wishes to know what Music Technology at Edinburgh actually means? well this is what i created for my final year project, a literal creative fusion of music and technology! Enjoy!</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/DMitUrW-OXI" frameborder="0" > </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D Kinect - Kinect SDK, XNA, Max/Msp and Voice Control]]></title>
    <link href="http://jordanrs.github.io/blog/2011/11/21/3D-kinect---kinect-SDK-XNA-maxmsp-and-voice-control/"/>
    <updated>2011-11-21T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2011/11/21/3D-kinect&#8212;kinect-SDK-XNA-maxmsp-and-voice-control</id>
    <content type="html"><![CDATA[<p>Its been a little quiet on the blog front, but many things have been programmed and I just haven&rsquo;t had the time to update this.</p>

<p>I just wanted to post a recent Kinect based development which is using the Kinect in a 3D environment</p>

<p>Check out the video below. Any questions or if you want the source just let me know</p>

<iframe width="420" height="315" src="http://www.youtube.com/embed/KS_6sXLS788" frameborder="0"> </iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Max/Msp to Kinect Via OSC for Offical Microsoft SDK]]></title>
    <link href="http://jordanrs.github.io/blog/2011/08/25/MaxMsp-to-Kinect-Via-OSC-for-Offical-Microsoft-SDK/"/>
    <updated>2011-08-25T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2011/08/25/MaxMsp-to-Kinect-Via-OSC-for-Offical-Microsoft-SDK</id>
    <content type="html"><![CDATA[<p><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 400px; height: 160px;" src="http://4.bp.blogspot.com/-N6x0K1PfpZ4/TlZYCw94AKI/AAAAAAAABYg/UZbQXeWYNKk/s400/screenshot.jpg" alt="" id="BLOGGER_PHOTO_ID_5644795987482902690" border="0" /></p>

<p>Today I finished the very first stages of my 4th year research project which was finding a way to take data from the Xbox Kinect and send it to Max/Msp. By using the <a href="http://opensoundcontrol.org/implementation/osc-net-v1-2">Ventuz OSC</a> C# wrapper i was able to pack all the X, Y, Z data for all the skeletal points into an OSC bundle and send that to Max where it was unpacked in the patch.</p>

<p>The data sent from the Kinect is the unchanged co-ordinate system of values in metres rangeing from -1 to 1.</p>

<p>That being said the data sent from Kinect to Max can be used by any device that is capable of reading OSC packets .The format of the OSC message is</p>

<p><code>/joint/skeleton_[1/2]/[joint] x, y, z</code></p>

<p>This is a simple implementation allows quick and easy access to the full power of the kinects skeletal tracking in windows for users of the offical SDK over OSC. I hope it can be of some use.</p>

<p><a href="https://sites.google.com/site/jordanrsblog/KinecttoMax.zip?attredirects=0&amp;d=1">Download Location 1</a></p>

<p><a href="http://www.mediafire.com/?ljoxdh01fdorgmd">MediaFire Mirror</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chaos Music - The Final Piece]]></title>
    <link href="http://jordanrs.github.io/blog/2011/04/30/Chaos-Music---The-Final-Piece/"/>
    <updated>2011-04-30T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2011/04/30/Chaos-Music&#8212;The-Final-Piece</id>
    <content type="html"><![CDATA[<p>Chaos music is a composition based on my research and programming of the functions documented in <a href="http://jordanrs.blogspot.com/2011/04/algorithmic-comp-piece-2-research-choas.html">my previous post.</a>  The piece uses the output data from the chaotic functions to drive musical synthesis with the built in functions of CLM, more explanation about methodology can be found in the attached report.</p>

<p><strong>Final Piece</strong></p>

<p><audio controls>
  <source src="http://sites.google.com/site/jordanrsblog/algorithmiccomp/ChaosMusic.mp3" type="audio/mpeg">
  Your browser does not support the audio tag.
</audio></p>

<p><strong>Download Source and Report</strong></p>

<p><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 287px; height: 400px;" src="http://2.bp.blogspot.com/-PqHESAb3dX0/TbxzzLXTW6I/AAAAAAAABXI/ZIrSRy9qfPU/s400/algocomp.jpg" alt="" id="BLOGGER_PHOTO_ID_5601479359603104674" border="0" /></p>

<p><a href="https://sites.google.com/site/jordanrsblog/algorithmiccomp/Project2.zip"><br />Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithmic Comp. Piece 2 Research - Chaos Functions]]></title>
    <link href="http://jordanrs.github.io/blog/2011/04/30/Algorithmic-Composition-Piece-2-Research---Choas-Functions/"/>
    <updated>2011-04-30T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2011/04/30/Algorithmic-Composition-Piece-2-Research&#8212;Choas-Functions</id>
    <content type="html"><![CDATA[<p><strong>For my final year piece iv been researching chaotic functions and non-linear maps. Below is a selection of function iv ported into Lisp. Each function outputs a text file that can be imported into most graphing software (the corresponding pictures were all produced with MATLAB). I intend to implement these functions and use there output to drive a piece of music.</strong></p>

<p><strong>The Logistic Equation</strong></p>

<p><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 302px; height: 298px;" src="http://4.bp.blogspot.com/-E1OToaCO-yg/TbxIpC3F1fI/AAAAAAAABU4/8soPQ8FU69Y/s320/logistic.jpg" alt="" id="BLOGGER_PHOTO_ID_5601431906521830898" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "logistic.txt" :direction :output
                                  :if-exists :supersede)
(let*  ((x 0.5)
 (r-env '(0 1 1000 4.0))
 (r 0.0))


   (loop for i below 1000 do
  (setf r (envelope-interp i r-env)
     x (* r (* x (- 1 x))))
  (format t "~D ~D~%" r x)
  )))
</code></pre>

<p><strong>The Henon Map</strong></p>

<!--more-->


<p><img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 256px;" src="http://3.bp.blogspot.com/-6WhbHPFz2VU/TbxYE4-VJCI/AAAAAAAABVA/uQxuuX5kwGg/s320/henon.jpg" alt="" id="BLOGGER_PHOTO_ID_5601448877578593314" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "henon.txt" :direction :output
                                  :if-exists :supersede)
(let* ((x 0.1)
    (y 0.1)
 (a 1.4)
 (b 0.3)
 (z 0.0))

 (loop for i below 500 do
 (setf z x
    x (-(+ y 1) (* a (* x x)))
    y (* b z))

 (format t "~D ~D~%" x y))))
</code></pre>

<p><strong>The Lorenz Attractor</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 300px; height: 320px;" src="http://4.bp.blogspot.com/-GlNo5diFAZo/TbxZqaGYVlI/AAAAAAAABVI/zXK9B45Av9Y/s320/lorenz.jpg" alt="" id="BLOGGER_PHOTO_ID_5601450621637514834" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "lorenz.txt" :direction :output
                             :if-exists :supersede)
(let* ((x1 0.0)
 (y1 1.0)
 (z1 0.0)
 (dt 0.001)
 (x 0.0)
 (y 0.0)
 (z 0.0)
 (a 10)
 (b (/ 8 3))
 (p 28))

 (loop for i below 1000 do
  (setf x (+ x1 (* (* a (- y1 x1)) dt))
     y (+ y1 (* (- y1 (* x1 (- p z1))) dt))
     z (+ z1 (* (- (* x1 y1) (* b z1)) dt))
     x1 x
     y1 y
     z1 z)

 (format t "~D ~D ~D~%" (* 1000 x) (* 1000 y) (* 1000 z)))))
</code></pre>

<p><strong>The Ikeda Map</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 276px; height: 320px;" src="http://4.bp.blogspot.com/-GWcUIpsnOOc/TbxamvvnwOI/AAAAAAAABVQ/95bnAwy3KA8/s320/ikeda.jpg" alt="" id="BLOGGER_PHOTO_ID_5601451658239787234" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "ikeda.txt" :direction :output
                               :if-exists :supersede)
(let* ((x 1.0)
 (y 1.0)
 (u 0.95)
 (z 0.0)
 (b 0.0))
 (loop for i below 1000 do
  (setf z x
     b (- 0.4 (/ 6 (+ 1 (+ (* x x) (* y y)))))
     x (+ 1 (* u (- (* x (cos b)) (* y (sin b)))))
     y (* u (+ (* z (sin b)) (+ y (cos b)))))

 (format t "~D ~D~%" x y))))
</code></pre>

<p><strong>The Tent Map</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 320px;" src="http://1.bp.blogspot.com/-9Lpgb5RcTPY/TbxbjFJq4kI/AAAAAAAABVY/oh7uzLHqos8/s320/tent.jpg" alt="" id="BLOGGER_PHOTO_ID_5601452694778339906" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "tent.txt" :direction :output
                                :if-exists :supersede)
(let* ((x 0.5)
   (u 0.0)
   (u-env '(0 1 1000 2.0)))

 (loop for i below 1000 do
  (if (&amp;lt; x 0.5)
   (progn
   (setf u (envelope-interp i u-env)
      x (* u x))
   (format t "~D ~D~%" x u))
   (progn
   (setf u (envelope-interp i u-env)
      x (* u (- 1 x)))

   (format t "~D ~D~%" u x))))))
</code></pre>

<p><strong>The Gauss Iterated Map</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 258px;" src="http://1.bp.blogspot.com/-SmYtPew_6nY/TbxciohI0TI/AAAAAAAABVg/UbPoMLPtdrQ/s320/gauss.jpg" alt="" id="BLOGGER_PHOTO_ID_5601453786603770162" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "gauss.txt" :direction :output
                                :if-exists :supersede)
(let*  ((x 0.0)
 (a 6.2)
 (b-env '(0 -1 500 1))
 (b 0.0))

   (loop for i below 500 do
  (setf b (envelope-interp i b-env)
     x (+ b (exp(* (* -1 a) (* x x)))))
  (format t "~D ~D~%" i x))))
</code></pre>

<p><strong>The Tinkerbell Map</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 284px;" src="http://1.bp.blogspot.com/-I37WgDY5-Yg/TbxdO8MjqEI/AAAAAAAABVo/POBxhfgV6ng/s320/tinkerbelle.jpg" alt="" id="BLOGGER_PHOTO_ID_5601454547800401986" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "tinkbell.txt" :direction :output
                                :if-exists :supersede)
(let* ((x -0.72)
    (y -0.64)
 (a 0.9)
 (b -0.6013)
 (c 2)
 (d 0.5)
 (z 0.0))

 (loop for i below 2500 do
 (setf z x
    x (+ (* b y) (+ (* a x) (- (* x x) (* y y))))
    y (+ (* d y) (+ (* c z) (* 2 (* z y)))))

 (format t "~D ~D~%" x y))))
</code></pre>

<p><strong>The Rabinovich-Fabrikant Equation</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 271px;" src="http://4.bp.blogspot.com/-gIz3Lb1N7ag/TbxeMisXZLI/AAAAAAAABVw/uH4KW7rAB_8/s320/rf.jpg" alt="" id="BLOGGER_PHOTO_ID_5601455606106383538" border="0" /></p>

<p>The graph may not look like those from other resources but that&rsquo;s because it was not ran over enough iterations, changing the loop value to over 1000 produces the main graph shape.</p>

<pre><code>(with-open-file (*standard-output* "rabfab.txt" :direction :output
                                  :if-exists :supersede)
(let* ((x1 -1.0)
 (y1 0.0)
 (z1 0.5)
 (dt 0.01)
 (x 0.0)
 (y 0.0)
 (z 0.0)
 (a 0.14)
 (g 0.1))

 (loop for i below 1000 do
  (setf x (+ x1 (* (+ (* g x1) (* y1 (+ (* x1 x1) (- z1 1)))) dt))
     y (+ y1 (* (+ (* g y1) (* x1 (- (+ (* 3 z1) 1) (* x1 x1)))) dt))
     z (+ z1 (* (* (* 2 -1) z1) (+ a (* x1 y1)) dt))
     x1 x
     y1 y
     z1 z)

 (format t "~D ~D ~D~%" (* 1000 x) (* 1000 y) (* 1000 z)))))
</code></pre>

<p><strong>The Torus Knot</strong>
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 320px; height: 266px;" src="http://3.bp.blogspot.com/-0BfnejP-UEE/TbxftjkCQsI/AAAAAAAABWI/eOcIeBdxdtU/s320/torustd.jpg" alt="" id="BLOGGER_PHOTO_ID_5601457272787190466" border="0" />
<img style="display: block; margin: 0px auto 10px; text-align: center; cursor: pointer; width: 311px; height: 320px;" src="http://4.bp.blogspot.com/-R1iTUBrYO3Q/TbxfbAiVvyI/AAAAAAAABWA/BTBqMf8H5eA/s320/torus.jpg" alt="" id="BLOGGER_PHOTO_ID_5601456954147192610" border="0" /></p>

<pre><code>(with-open-file (*standard-output* "torus.txt" :direction :output
                                  :if-exists :supersede)
(let* ((x 0.0)
   (y 0.0)
   (z 0.0)
   (r 0.0)
   (q 5)
   (p 2)
   (phi 0.0)
   (phi-env '(0 0 1000 6.283)))

 (loop for i below 1000 do
    (setf phi (envelope-interp i phi-env)
    r (+ (cos (* q phi)) 2)
    x (* r (cos (* p phi)))
    y (* r (sin (* p phi)))
    z (sin (* q phi)))

  (format t "~D ~D ~D~%" x y z))))
</code></pre>

<p><strong>The Van Der-Pol Oscillator</strong></p>

<pre><code>(with-open-file (*standard-output* "vdp.txt" :direction :output
                                  :if-exists :supersede)
(let* ((x1 0.5)
   (y1 1.0)
   (x 0.0)
   (y 0.0)
   (u 6.0)
   (dt 0.1))

   (loop for i below 10000 do
  (setf x (+ x1 (* (* u (- (- x1 (* (/ 1 3) (* x1 (* x1 x1)))) y1)) dt))
     y (+ y1 (* (* (/ 1 u) x1) dt))
     x1 x
     y1 y)

 (format t "~D ~D~%" y x))))
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Computer Programming for Music Technology - Quadraphonic Delay In C and Max/Msp]]></title>
    <link href="http://jordanrs.github.io/blog/2010/12/19/Computer-Programming-for-Music-Technology---Quadraphonic-Delay-In-C-and-MaxMsp/"/>
    <updated>2010-12-19T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2010/12/19/Computer-Programming-for-Music-Technology&#8212;Quadraphonic-Delay-In-C-and-MaxMsp</id>
    <content type="html"><![CDATA[<p>The final piece of a course in C and its uses in building Max/Msp objects was to design and code a quadraphonic (four tap) delay in C for use as a Max/Msp object. The delay takes an incoming mono signal and allows the user to set four delay times which correspond to the the four outputs.</p>

<p><strong>Source code and Object</strong>
<a href="https://sites.google.com/site/jordanrsblog/cpmt/quaddelaysrc.zip">
Download</a></p>

<p>Built using Max/Msp SDK 5.1.6, tested on Windows 7 with Max/Msp 5.0.7</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Time Systems Piece 2 - PS3 Dualshock 3 as a Performance Controller]]></title>
    <link href="http://jordanrs.github.io/blog/2010/12/18/Real-Time-Systems-Piece-2---PS3-Dualshock-3-as-a-Performance-Controller/"/>
    <updated>2010-12-18T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2010/12/18/Real-Time-Systems-Piece-2&#8212;PS3-Dualshock-3-as-a-Performance-Controller</id>
    <content type="html"><![CDATA[<p>Building on Submission 1 this performance piece use the PS3 Dualshock 3 controller as its interface. It takes full advantage of the built in tilt sensors as well as pressure triggers, analogue sticks D-pad and buttons. Functionality is best achieved through the <a href="http://www.motioninjoy.com/download">Motion In Joy driver</a> and getting the data through Max&rsquo;s <a href="http://cycling74.com/docs/max5/refpages/max-ref/hi.html">hi</a> object</p>

<p><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 349px;" src="http://2.bp.blogspot.com/-2QQ78lprmF8/TbxmDp8h58I/AAAAAAAABWg/FzAVj6ei9GY/s400/ps3pres.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5601464249527429058" />
<img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 302px;" src="http://1.bp.blogspot.com/-oPwJwKwr0PY/TbxmhIpmoeI/AAAAAAAABWo/pdf64l1zxhU/s400/ps3dev.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5601464755985752546" /></p>

<p><strong>The Final Performance</strong></p>

<object type="application/x-shockwave-flash" data="http://sites.google.com/site/jordanrsblog/mp3player/player.swf" id="audioplayer3" height="24" width="290">
<param name="movie" value="http://sites.google.com/site/jordanrsblog/mp3player/player.swf">
<param name="FlashVars" value="playerID=3&amp;soundFile=http://sites.google.com/site/jordanrsblog/realtimesystems/piece2/rtspiece2.mp3">
</object>


<p><strong>Raw Max Files and Report</strong>
<a href="https://sites.google.com/site/jordanrsblog/realtimesystems/piece2/PS3_Performance_patch.zip">
Download</a></p>

<p>Built using Max 5.0.7 and MotioninJoy 6</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithmic Composition with Common Lisp Music - Piece-1]]></title>
    <link href="http://jordanrs.github.io/blog/2010/11/15/Algorithmic-Composition-with-Common-Lisp-Music---Piece-1/"/>
    <updated>2010-11-15T00:00:00+00:00</updated>
    <id>http://jordanrs.github.io/blog/2010/11/15/Algorithmic-Composition-with-Common-Lisp-Music&#8212;Piece-1</id>
    <content type="html"><![CDATA[<p>This composition was used as an inital exploration into the world of Lisp and Common Lisp Music 4 (CLM). It experiemtned with using the builtin instruments as well as instruments provided by the course lecturer. It takes loose inspiration from a piece by John Chowning with more explanation in the report. All samples used are referenced from within the source file and can be downloaded from <a href="" title="http://www.freesound.org/">www.freesound.org</a></p>

<p><strong>Final Composition</strong></p>

<object type="application/x-shockwave-flash" data="http://sites.google.com/site/jordanrsblog/mp3player/player.swf" id="audioplayer3" height="24" width="290">
<param name="movie" value="http://sites.google.com/site/jordanrsblog/mp3player/player.swf">
<param name="FlashVars" value="playerID=3&amp;soundFile=https://sites.google.com/site/jordanrsblog/algorithmiccomp/Thing1.mp3">
<param name="quality" value="high">
<param name="menu" value="false">
<param name="wmode" value="transparent">
</object>


<p><a href="" title="https://sites.google.com/site/jordanrsblog/clmpiece1.zip">Download Source and Report</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real Time Systems Piece 1 - Hercules DJ Steel in Max/Msp]]></title>
    <link href="http://jordanrs.github.io/blog/2010/10/30/Real-Time-Systems-Piece-1---Hercules-DJ-Steel-in-MaxMsp/"/>
    <updated>2010-10-30T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2010/10/30/Real-Time-Systems-Piece-1&#8212;Hercules-DJ-Steel-in-MaxMsp</id>
    <content type="html"><![CDATA[<p><img style="display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;width: 400px; height: 243px;" src="http://4.bp.blogspot.com/-xCsgkRVPjRk/TbxlSG3B5TI/AAAAAAAABWY/Q-m7uKspN_c/s400/hercules.jpg" border="0" alt=""id="BLOGGER_PHOTO_ID_5601463398295528754" />
A real time performance piece built using Max/Msp. It is designed to be controlled by the <a href="http://www.hercules.com/uk/DJ-Music/bdd/p/83/dj-control-steel/">Hercules DJ Steel Controller</a> and was my first look at making real time compositions with different controllers</p>

<p><strong>The final performance:</strong></p>

<object type="application/x-shockwave-flash" data="http://sites.google.com/site/jordanrsblog/mp3player/player.swf" id="audioplayer2" height="24" width="290">

<param name="movie" value="http://sites.google.com/site/jordanrsblog/mp3player/player.swf">
<param name="FlashVars" value="playerID=2&amp;soundFile=http://sites.google.com/site/jordanrsblog/realtimesystems/piece1/rtsassesment1.mp3">
<param name="quality" value="high">
<param name="menu" value="false">
<param name="wmode" value="transparent">
</object>


<p><strong>The raw Max files and report</strong></p>

<p><a href="https://sites.google.com/site/jordanrsblog/realtimesystems/piece1/RTSP_Assessment_1.zip">Download</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fourier Analysis and MATLAB - Phase Vocoder]]></title>
    <link href="http://jordanrs.github.io/blog/2010/10/20/Fourier-Analysis-and-MATLAB---Phase-Vocoder/"/>
    <updated>2010-10-20T00:00:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2010/10/20/Fourier-Analysis-and-MATLAB&#8212;Phase-Vocoder</id>
    <content type="html"><![CDATA[<p>My first go at using MATLAB as a language was to build a phase vocoder with variable Q (below 1.5 works best) and create a GUI for easier use. It contains two methods of stretching  Both versions of the source code are attached (GUI and non-GUI). Isn&rsquo;t the fastest implementation so I would advise against trying to stretch large files. There are two algorithms included for stretching, the first use Overlap add of windows to create the stretch where as the other takes into account phase modifications</p>

<p>Non-GUI implementation <a href="https://sites.google.com/site/jordanrsblog/musicalfourier/phase_vocoder_src.zip">
Download</a></p>

<p>GUI Implementation <a href="https://sites.google.com/site/jordanrsblog/musicalfourier/GUI_phase_vocoder_src.zip">Download</a></p>
]]></content>
  </entry>
  
</feed>
