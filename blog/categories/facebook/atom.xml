<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: facebook | Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/blog/categories/facebook/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2014-04-30T18:42:49+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Facebook login and permissions with Capybara]]></title>
    <link href="http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara/"/>
    <updated>2013-06-01T10:27:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara</id>
    <content type="html"><![CDATA[<p>Having begun to use Capybara and Rspec quiet heavily there have been a few challenges that need to be overcome. One of these is that the applications I develop day to day are heavily intertwined with Facebook and user flow relies heavily on Facebook login and accepting permissions at various points throughout the application.</p>

<!-- more -->


<p>Outside of the Facebook chrome (the non iframed version of the application) its quite easy interact with these events as if we were a normal user.</p>

<p><strong>Use Facebook Test Users</strong></p>

<p>First go to your Facebook applications roles dashboard at <a href="https://developers.facebook.com/apps/">https://developers.facebook.com/apps/</a>[APPID]/roles and create some test users and if needed make them friends with one another. Take a note of there email, fbid and create a password for them.</p>

<p><strong>Capybara Settings</strong></p>

<p>Since Facebook is an external service we need to extend Capybaras default wait time incase its being slow and also change the host that the specs run under so that it matches the settings for our Facebook app.</p>

<p>``` ruby</p>

<pre><code>Capybara.default\_wait\_time = 10
Capybara.app_host = 'http://' + Settings.host
</code></pre>

<p>```
<strong>Test User Factory</strong></p>

<p>The FactoryGirl gem provides a great way to create and manage test data based on rails models. FactoryGirl can even be used with things other than models so to keep my actual user model separate from my test users data I created a special TestUser class. By placing it in a subfolder of the support folder the default installation will load all files and sub folders at initialisations allowing us access to this special class in our tests.</p>

<p>``` ruby</p>

<pre><code># spec/support/models/test_user.rb
class TestUser
   attr_accessor  :email, :password, :fbid, :name
end
</code></pre>

<p>```  <br/>
With this class its then easily to make a test_user factory as you would a rails model factory. In this instance iv used a nested factory for additional test users with different states.</p>

<p>``` ruby</p>

<pre><code> FactoryGirl.define do
   factory :test_user do |f|
     name 'Bob Ameibdcaahgd Liangman'
     fbid '100005892102238'
     email 'oyncoeh_liangman_1368123301@tfbnw.net'
     password 'XXXX'

     factory :test_user_mark do
       name 'Mark Ameiehbaakf Wisemanstein'
       fbid '100005958231006'
       email 'dqfaoxm_wisemanstein_13684123@tfbnw.net'
       password 'XXXX'
     end

     factory :test_user_arabic do
       name 'Richard Amehgghdihei Changescu'
       fbid '100005877823859'
       email 'lifczou_changescu_1368123920@tfbnw.net'
       password 'XXXX'
     end
   end
 end
</code></pre>

<p>```</p>

<p>Using these tests users in a capybara spec only has one caveat. They must be created in memory using build since there isn&rsquo;t a database table for them to be saved to</p>

<p>``` ruby</p>

<pre><code>let(:test_user_mark) do
  FactoryGirl.build(:test_user_mark)
end
</code></pre>

<p>```
<strong>Automating Facebook</strong></p>

<p>The following module is a collection of macros that take care of the Facebook login and permissions dialogues. It attempts to deal with the various possible flows that can happen when using login with Facebook depending on wether the user has logging in and is being asked for permissions in the same sequence or if the permission are taken at a different point. There is also some javascript macros for login the user out of Facebook and removing the app permissions</p>

<p>``` ruby</p>

<pre><code># spec/support/facebook_macros
module FacebookMacros

  def complete_facebook_dialogues_on_click(selector, test_user)
    # until bookface version bumped to latest we have no way to know its ready so delay, not ideal
    sleep 1
    find("#{selector}").click
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      fill_in_facebook_form(test_user) if page.has_css?('#loginbutton')
      accept_permissions_outside_facebook
    end
  end

  def fill_in_facebook_form(test_user)
    fill_in('email', :with =&gt; "#{test_user.email}") 
    fill_in('pass', :with =&gt; "#{test_user.password}")
    find('#loginbutton').click
  end

  def accept_additional_permissions
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      accept_permissions_outside_facebook
    end
  end

  def accept_permissions_outside_facebook
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
  end

  def deauth_app
    sleep 1
    page.execute_script %Q{
       FB.api("/me/permissions","DELETE", function(response){
         console.log(response)
       });
     }
    sleep 1
  end

  def logout
    sleep 1
    page.execute_script %Q{
      FB.logout(function(response) {
        // user is now logged out
      });
     }
    sleep 1
  end

end
</code></pre>

<p>```
The above module can be easily included in Rspec&rsquo;s configure block with the config.includes command</p>

<p>``` ruby</p>

<pre><code>RSpec.configure do |config|

  ....
  config.include FacebookMacros
  ....

end
</code></pre>

<p>```
An example scenario using these macros. Its important that they are run with javascript enabled.</p>

<p>``` ruby</p>

<pre><code>scenario 'user import friends', :js =&gt; true do
  visit root_path  
  complete_facebook_dialogues_on_click('#auth_me', test_user)
  page.should have_css('#entry_step_1') 
  visit home_dashboard_path


  expect{

    sleep 2
    find('#add_events').click

    accept_additional_permissions
    sleep 2

    page.should_not have_css('#add_events')
    page.should have_css('.events_item')
    # deal with additional perms
  }.to change(Event, :count)


  logout
  Capybara.reset_session!
end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
