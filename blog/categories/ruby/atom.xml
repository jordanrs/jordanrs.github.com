<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2014-05-26T20:06:36+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Algorithums in Ruby]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/02/algorithums-in-ruby/"/>
    <updated>2014-05-02T08:05:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/02/algorithums-in-ruby</id>
    <content type="html"><![CDATA[<h2>Greatest Common Divisor</h2>

<p>Ruby has a native implementation of the greatest common divisor.</p>

<p><code>ruby
  20.gcd(15)
  =&gt; 5
</code></p>

<p>However as a pure academic exercise lets implement Euclid&rsquo;s algorithm for finding the greatest common divisor between any number of numbers in ruby!</p>

<p>```ruby
  def gcd(u, v)</p>

<pre><code>if v.zero?
  return u
else 
  gcd(v, u.modulo(v))
end
</code></pre>

<p>  end
```</p>

<p>Greatest Common Divisor for three numbers</p>

<p>```ruby
  def gcdt(u, v, w)</p>

<pre><code>gcd(gcd(u, v), w)
</code></pre>

<p>  end
```</p>

<p>Extending this to a generic algorithm that can take any number of numbers</p>

<p>```ruby
  def gcd_any(*args)</p>

<pre><code>raise ArgumentError 'Need at least two numbers' if args.length &lt; 2

start = args.shift
args.inject(start) do |result, value| 
  gcd(result, value) 
end
</code></pre>

<p>  end
```</p>
]]></content>
  </entry>
  
</feed>
