<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2013-08-28T19:12:09+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting up Jenkins with Chef for Rails Project]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/"/>
    <updated>2013-08-21T07:26:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project</id>
    <content type="html"><![CDATA[<p>There are numerous guides available on line for setting up a fresh install of Jenkins with numerous different configurations but i wanted to create a chef recipe that would give me a clean Jenkins install with my required project dependencies (excluding rvm) at the click of a button.</p>

<p>The reasons the excluding RVM in the chef process, even though the chef-rvm cookback is fantastic having used it before in the creation of a Rails stack is that i just could get system level RVM to play nice with Jenkins and user specific RVM (to the Jenkins user) to automatically install without asking for the Jenkins password. Better minds will probably be able to solve this issue but i opted for a different approach.</p>

<!-- more -->


<h1>The CookBook</h1>

<p>My build cookbook and recipes can be found over on GitHub at [URL]. It contains everything we require (except rvm) for building our rails apps, Postgres for the postgres C headers for the pg gem, a javascript runtime in the form of node.js for rails 3.1 and greater asset compilation, a web server for accessing Jenkins, libqt4 and Xvfb for headless running of our integration specs with capybara webkit.</p>

<ul>
<li>Clone or download the chef repositry from [URL]</li>
<li>add in your own .chef/knife.rb and .pem files or make sure they can connect to your chef server</li>
<li>run <code>berks install</code> and <code>berks upload</code> to collect together all the associated cookbooks then push them up to the hosted chef repo</li>
<li>run <code>rake install</code> to upload our custom cookbooks and roles</li>
<li>then create a new instance of EC2 that will automatically be built with our jenkins build recipes by running.</li>
</ul>


<p>``` bash</p>

<pre><code>sudo 
</code></pre>

<p>```
<em>this command requires a few config options to be added to your knife file to achieve the brevity. I wrote about this in a previous post <a href="/blog/2013/08/21/setting-up-jenkins-with-chef-for-rails-project/">here</a></em></p>

<p>This final command will set about creating a new EC2 micro instance with Ubuntu 12.04 AMI in Europe and then install all the necessary packages for running our standard rails stack. It will also setup a reverse proxy for nginx so that jenkins will be available on on completeion at the EC2 instances Public DNS address.</p>

<p>If all goes well the instal takes around 20 minutes and at the end you should see a print out as such.</p>

<p>``` bash</p>

<pre><code>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com Chef Client finished, 91 resources updated
ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com

Instance ID: i-XXXXXXXX
Flavor: t1.micro
Image: ami-7962730d
Region: eu-west-1
Availability Zone: eu-west-1a
Security Groups: default
Security Group Ids: default
Tags: {"Name"=&gt;"i-XXXXXXXX"}
SSH Key: chef-test
Root Device Type: ebs
Root Volume ID: vol-XXXXXXXX
Root Device Name: /dev/sda1
Root Device Delete on Terminate: true
Public DNS Name: ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com
Public IP Address: XX.XXX.XXX.X
Private DNS Name: ip-XX-XX-XXX-XXX.eu-west-1.compute.internal
Private IP Address: XX.XX.XXX.XXX
Environment: _default
Run List: role[jenkinsbuilder]
</code></pre>

<p><code>`
Copy your public DNS address</code>ecX-XX-XXX-XXX-X.eu-west-1.compute.amazonaws.com`` paste into a browser, and you should be greated by jenkins loving face.</p>

<p><img src="/images/post_images/21-8-2013-jenkins/jenkins-face.png" alt="Jenkins Welcome" /></p>

<h2>A few caveats</h2>

<ul>
<li><p>We need to change the <strong>HTTP_HOST</strong> value in <strong>/etc/default/jenkins</strong> to be <strong>127.0.0.1</strong> as it is set by default to the DNS Name which means the deamon doesnt work to reload the app with nginx front end.</p></li>
<li><p>Secondly we need to <code>jenkins ALL=(ALL) NOPASSWD:ALL</code> to /etc/sudoers so that Jenkins isn&rsquo;t asked for a password (jenkins password required for &lsquo;apt-get &mdash;quiet &mdash;yes update&rsquo;:)</p></li>
<li><p>Postgres extensions arent installed and any builds which use them will fail. So if your using an extension like hstore it needs to be activated and this <a href="https://gist.github.com/terryjray/3296171">gist</a> gives a good run down of the commands to run.</p></li>
</ul>


<h1>Building our Rails Project</h1>

<h2>Setting up RVM</h2>

<p>The instructions for installing rvm with can all be found with more detail at <a href="https://rvm.io/integration/jenkins">here</a>, so the below is mearly a quick overview of the commands i ran to get rvm set up.</p>

<p>```bash</p>

<pre><code>sudo su -s /bin/bash jenkins #Loggin in with full terminal as jenkins 

cd ~ #change to jenkins home dir

\curl -L https://get.rvm.io | bash #install RVM the opening slash is important and delibrate

# Add the following two lines to ~/.bashrc 

[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm"
PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

# exit the shell and log back in 

type rvm | head -1 # should show rvm is a function

# add the following flags to ~/.rvmrc

rvm_install_on_use_flag=1
rvm_project_rvmrc=1
rvm_gemset_create_on_use_flag=1
</code></pre>

<p>```</p>

<p>Again more explanation can be found over at the rvm instruction pages. <a href="https://rvm.io/integration/jenkins">here</a></p>

<h2>Pulling from Heroku</h2>

<p>To pull from heroku ie use heroku as the SCM we need to add the generated SSH key to a user associated with the project.</p>

<p>```bash</p>

<pre><code>sudo su -s /bin/bash jenkins

cd ~

cat ~/.ssh/id_rsa.pub
</code></pre>

<p>```</p>

<p>The output from the cat command needs to be copied and pasted into the ssh-keys for a user on heroku.com or via heroku cli <code>heroku keys:add ~/.ssh/id_rsa.pub</code></p>

<p>The next thing is to make sure heroku is added to jenkins <code>~/.ssh/known_hosts</code>, the easiest way to do this is just git clone one of the projects for user the key was just added to and type yes when asked about the host.</p>

<h1>Setting up Jenkins</h1>

<p>Now that Jenkins will boot up and we are ready to pull from our SCM provider its time to setup security, install some plugins and set some global config variables so make life easier.</p>

<h2>Security</h2>

<p>Jenkins security is pretty simple and the docs do a great job of demonstrating how to set up a standard username/password login system with you as the super user. There is no need for me to duplicate this so head over to <a href="https://wiki.jenkins-ci.org/display/JENKINS/Standard+Security+Setup">Jenkins Wiki</a> and follow their instructions.</p>

<h2>Plugins</h2>

<p>The following plugins are my standard goto&rsquo;s for a new jenkins install</p>

<ul>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin"><strong>git</strong></a> &ndash; Adds git support to Jenkins SCM section. A global user name and email address will need to be configured in the global settings panel.</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup"><strong>thinbackup</strong></a> &ndash; Regularly backup global config and project configs</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/ChuckNorris+Plugin"><strong>chucknorris</strong></a> &ndash; Chuck Norris banter on failed and successful builds</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Ruby+metrics+plugin"><strong>rubyMetrics</strong></a> &ndash; Allows the interpretation of RCov coverage reports</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Heroku+Plugin"><strong>heroku</strong></a> &ndash; Interact with heroku</li>
<li><a href="https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin"><strong>email extension</strong></a> &ndash; Extends Jenkins built in e-mail.</li>
</ul>


<h1>Setting up the Rails Project</h1>

<h2>Getting good reports</h2>

<p>When running rails tests within Jenkins the output isn&rsquo;t formatted in such a way that Jenkins really knowns what to do with it, so a failed test run and a successful test run are seen as fundamentally the same thing. To alter this behaviour need to add the <strong>ci_reporter</strong> gem to to your projects gem file. The same applies to the standard code coverage gem <strong>simplecov</strong>, the output produced can be seen in the Jenkins workspace, but you dont get the nice tracking graphs. An easy way to fix this is with the <strong>simplecov-rcov</strong> gem which allows simplecovs output to be formatted like rocvs which can be picked up by the rubymetrics plugin in Jenkins.</p>

<p>All you need to do is add the following lines above SimpleCov.start</p>

<p>```ruby</p>

<pre><code>require 'simplecov'
require 'simplecov-rcov'
SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
SimpleCov.start 'rails'
</code></pre>

<p><code>`       
The best way to get the correct formatted output is to set up rake task using</code>RSpec::Core::RakeTask<code>in 'lib/tasks/spec.rake' that allows you to run all specs with the command</code>rake all``</p>

<p>```ruby</p>

<pre><code>require 'rspec/core/rake_task'
require 'ci/reporter/rake/rspec'

RSpec::Core::RakeTask.new(:all =&gt; ["ci:setup:rspec"]) do |t|
  t.pattern = '**/*_spec.rb'
end
</code></pre>

<p>```</p>

<h2>Separate Environment</h2>

<p>The last thing i did was setup a new environment for the Jenkins user based of the default test environment. First I create a <code>config/environments/jenkins_test.rb</code>, add this to any bundler groups that test env was part of in config/application.rb and then leave out setting up a entry in <code>database.yml</code> as this will be done during the Jenkins build process</p>

<h1>Project Setup</h1>

<h2>Advanced Project Options</h2>

<p>Set up quiet time option in the build when using heroku deploy hooks as they can fire before the last commit is available</p>

<h2>Build Triggers</h2>

<p>Trigger builds remotely through heroku deploy hooks.</p>

<h2>Build</h2>

<p>The current stock build script for a rails project</p>

<p>```bash</p>

<pre><code>#!/bin/bash 

# Jenkins is installed as a service account when its running builds so it isn't 
# using a login shell. So since RVM was installed to the user and is setup through .bashrc 
# this doesn't happen so we need to load RVM right after the shebang   

source "$HOME/.rvm/scripts/rvm"

# Set the global rails env
export RAILS_ENV=jenkins

# Load RVM with a ruby and a gemset, if neither are present they will be installed
rvm use 2.0.0@brandtone

set -e

bundle install

# Duplicate a stock database yml file and the change our database name
cp ~/database.yml config/database.yml
sed -i 's/database_name/brandtone/g' config/database.yml

# Create if not present and migrate out DB
rake db:create RAILS_ENV=jenkins_test
rake db:migrate RAILS_ENV=jenkins_test

# run all tests in a virtual frame buffer thats auto numbered to prevent clashes
xvfb-run --auto-servernum bundle exec rake all
</code></pre>

<p>```</p>

<h2>Post Build Actions</h2>

<p>Standard Post Build Actions</p>

<ul>
<li>Activate Chuck Norris</li>
<li>Publish JUnit test result report</li>
<li>Publish RCov Report</li>
<li>Send Email Notifications</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serilisation, Preloading and SimpleCov]]></title>
    <link href="http://jordanrs.github.io/blog/2013/08/09/serilisation-preloading-and-simplecov/"/>
    <updated>2013-08-09T16:32:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/08/09/serilisation-preloading-and-simplecov</id>
    <content type="html"><![CDATA[<p><a href="http://alisdair.mcdiarmid.org/2013/02/02/fixing-rails-auto-loading-for-serialized-objects.html">Alisdair McDiarmid</a>  has a great write up on solving the problems of serialising and deserializing custom objects to yaml in rails whilst in development and getting around the <code>ArgumentError: undefined class/module UnknownClass</code> error that are thrown due to classes not being loaded.</p>

<p>The solution is to eager load classes and reload them each request to make sure that when YAML deserialization occurs the classes are present as usually this process doesnt trigger the default lazy loading of classes in development.</p>

<p>```ruby The solution looks like this <a href="http://alisdair.mcdiarmid.org/2013/02/02/fixing-rails-auto-loading-for-serialized-objects.html">http://alisdair.mcdiarmid.org/2013/02/02/fixing-rails-auto-loading-for-serialized-objects.html</a> Source</p>

<pre><code># Eager load all value objects, as they may be instantiated from
# YAML before the symbol is referenced
config.before_initialize do |app|
    app.config.paths.add 'app/values', :eager_load =&gt; true
end

# Reload cached/serialized classes before every request (in development
# mode) or on startup (in production mode)
config.to_prepare do
    Dir[ File.expand_path(Rails.root.join("app/values/*.rb")) ].each do |file|
        require_dependency file
    end
    require_dependency 'article_cache'
end
</code></pre>

<p>```</p>

<h2>Testing, SimpleCov and Missed Coverage</h2>

<p>This solution was great, it solves the loading issue but during development I noticed the lines of code covered by SimpleCov was reduced, looking into know issues on the SimpleCov <a href="https://github.com/colszowka/simplecov/issues/107">github one explained</a> the reason why files where missing. The above solution of preloading the classes for deserialization means that the files are already loaded in memory before SimpleCov initialises and thus cant be tracked by Ruby&rsquo;s built in coverage mechanism.</p>

<h2>Solution</h2>

<p>As of rails 3.1, objects can be serialised to JSON as well as YAML. While it requires the addition of two methods to the class in question it does mean the class doesn&rsquo;t need to be preloaded and thus allows the code coverage to be tracked.</p>

<p>Adding the following two methods in your class and the additional JSON option to serialize in the model file allows for objects to be reinitialised based on the stored data parameters saved as JSON in the database.</p>

<p>```ruby in the model file</p>

<pre><code>serialize :column_name, JSON
</code></pre>

<p>```</p>

<p>```ruby Serializing and Deserializing with JSON <a href="http://stackoverflow.com/questions/4569329/serialize-ruby-object-to-json-and-back">http://stackoverflow.com/questions/4569329/serialize-ruby-object-to-json-and-back</a> source</p>

<pre><code>def self.json_create(o)
  new(*o['data'])
end

def to_json(*a)
  { 'json_class' =&gt; self.class.name, 'data' =&gt; [id, name, next_step] }.to_json(*a)
end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacked 2013]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/22/hacked-2013/"/>
    <updated>2013-07-22T12:03:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/22/hacked-2013</id>
    <content type="html"><![CDATA[<p><a href="http://hacked.io">Hacked.oi</a> was utterly awesome. In the end myself, <a href="https://twitter.com/marcelloseri">Marcello Seri</a> and <a href="https://twitter.com/b3noxley">Ben Oxley</a> created <a href="https://www.hackerleague.org/hackathons/hacked/hacks/homeflux">homeFlux</a>, a realtime system for adapting light levels to match a desired intensity and also adjust colour values over time much like <a href="http://justgetflux.com/">flu.x</a>. Was awesome fun.</p>

<iframe width="560" height="315" src="http://jordanrs.github.io//www.youtube.com/embed/T_gPdTJkoM0" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActiveAdmin Form Preview with Javascript FormData]]></title>
    <link href="http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata/"/>
    <updated>2013-07-10T20:46:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/07/10/activeadmin-form-preview-with-javascript-formdata</id>
    <content type="html"><![CDATA[<p>One of my recent tasks has been to build a preview of a form submission into an existing application. Having done something similar in the past involving changing the forms action with javascript, ajax posting the form (including images), generating a preview, changing the form back blaa blaa blaa blaa blaaaaa. I wanted to find a cleaner way to a) deal with the preview and b) ajaxing blob data (image/files) and thanks to not having to support IE implemented the following procedure using FormData and XMLHttpRequest 2.</p>

<!-- more -->


<p>FormData is awesome, give it a form including blob data and it&rsquo;ll return an object that can be attached to $.ajax or standard XMLHttpRequest.send and all the caveats and nuiances of ajax forms disappear in the blink of an eye.</p>

<p>``` javascript</p>

<pre><code>// something like
var fd = FormData.new( $('form')[0] );

$.ajax({
  ...
  url: '/iwantdata',
  data: fd, 
  ...
})

// or

var ajax = new XMLHttpRequest();
ajax.open("POST", "/iwantdata");
ajax.send(fd));
</code></pre>

<p>```</p>

<p>My stratergy then was simple, take more fieldset, clone it, wrap it in a formtag (all in memory), create the formdata object and away we go images and all. So my first attempt looked as follows.</p>

<p>``` javascript</p>

<pre><code>var buildFormData = function($fieldset){
  var $clone = $('#fieldset').clone({ deepWithDataAndEvents: true});
  var $form = $('&lt;form /&gt;).append($clone);
  var fd = new FormData($form[0])
  return fd
};

var sendPreview = function(formData){
  $.ajax({
   url: "/iwantdata",
   type: "POST",
   data: formData,
   processData: false,
   contentType: false,
  }).done(weDidIt);
};
</code></pre>

<p>```</p>

<p>This worked great at first all the data was being submitted correctly excpet file fields. These werent being copied over at all due to the caveats of browser security and cloning file fields it seems. So instead of doing it all in memory, which would have been the ideal, I had to use the file fields in the DOM but didnt want to have to pull the form apart and put it back together. Even though the html specification has a big NO NO when it comes to nested form tags it is possible to create them with javascript and this is what i did to build my in place subsection FormData.</p>

<p>``` javascript</p>

<pre><code>var buildFormData = function($fieldset){
  var $form = $fieldset.wrap('&lt;form /&gt;').closest('form');
  var fd = new FormData($form[0])
  $fieldset.unwrap();
  return fd
};

var sendPreview = function(formData){
  $.ajax({
   url: "/iwantdata",
   type: "POST",
   data: formData,
   processData: false,
   contentType: false,
  }).done(weDidIt);
};
</code></pre>

<p>```</p>

<p>Not ideal but this solution was a simple way to create a FormData from a subset of fields on the fly which includes all the file field information also.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Facebook login and permissions with Capybara]]></title>
    <link href="http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara/"/>
    <updated>2013-06-01T10:27:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2013/06/01/testing-facebook-login-and-permissions-with-capybara</id>
    <content type="html"><![CDATA[<p>Having begun to use Capybara and Rspec quiet heavily there have been a few challenges that need to be overcome. One of these is that the applications I develop day to day are heavily intertwined with Facebook and user flow relies heavily on Facebook login and accepting permissions at various points throughout the application.</p>

<!-- more -->


<p>Outside of the Facebook chrome (the non iframed version of the application) its quite easy interact with these events as if we were a normal user.</p>

<p><strong>Use Facebook Test Users</strong></p>

<p>First go to your Facebook applications roles dashboard at <a href="https://developers.facebook.com/apps/">https://developers.facebook.com/apps/</a>[APPID]/roles and create some test users and if needed make them friends with one another. Take a note of there email, fbid and create a password for them.</p>

<p><strong>Capybara Settings</strong></p>

<p>Since Facebook is an external service we need to extend Capybaras default wait time incase its being slow and also change the host that the specs run under so that it matches the settings for our Facebook app.</p>

<p>``` ruby</p>

<pre><code>Capybara.default\_wait\_time = 10
Capybara.app_host = 'http://' + Settings.host
</code></pre>

<p>```
<strong>Test User Factory</strong></p>

<p>The FactoryGirl gem provides a great way to create and manage test data based on rails models. FactoryGirl can even be used with things other than models so to keep my actual user model separate from my test users data I created a special TestUser class. By placing it in a subfolder of the support folder the default installation will load all files and sub folders at initialisations allowing us access to this special class in our tests.</p>

<p>``` ruby</p>

<pre><code># spec/support/models/test_user.rb
class TestUser
   attr_accessor  :email, :password, :fbid, :name
end
</code></pre>

<p>```  <br/>
With this class its then easily to make a test_user factory as you would a rails model factory. In this instance iv used a nested factory for additional test users with different states.</p>

<p>``` ruby</p>

<pre><code> FactoryGirl.define do
   factory :test_user do |f|
     name 'Bob Ameibdcaahgd Liangman'
     fbid '100005892102238'
     email 'oyncoeh_liangman_1368123301@tfbnw.net'
     password 'XXXX'

     factory :test_user_mark do
       name 'Mark Ameiehbaakf Wisemanstein'
       fbid '100005958231006'
       email 'dqfaoxm_wisemanstein_13684123@tfbnw.net'
       password 'XXXX'
     end

     factory :test_user_arabic do
       name 'Richard Amehgghdihei Changescu'
       fbid '100005877823859'
       email 'lifczou_changescu_1368123920@tfbnw.net'
       password 'XXXX'
     end
   end
 end
</code></pre>

<p>```</p>

<p>Using these tests users in a capybara spec only has one caveat. They must be created in memory using build since there isn&rsquo;t a database table for them to be saved to</p>

<p>``` ruby</p>

<pre><code>let(:test_user_mark) do
  FactoryGirl.build(:test_user_mark)
end
</code></pre>

<p>```
<strong>Automating Facebook</strong></p>

<p>The following module is a collection of macros that take care of the Facebook login and permissions dialogues. It attempts to deal with the various possible flows that can happen when using login with Facebook depending on wether the user has logging in and is being asked for permissions in the same sequence or if the permission are taken at a different point. There is also some javascript macros for login the user out of Facebook and removing the app permissions</p>

<p>``` ruby</p>

<pre><code># spec/support/facebook_macros
module FacebookMacros

  def complete_facebook_dialogues_on_click(selector, test_user)
    # until bookface version bumped to latest we have no way to know its ready so delay, not ideal
    sleep 1
    find("#{selector}").click
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      fill_in_facebook_form(test_user) if page.has_css?('#loginbutton')
      accept_permissions_outside_facebook
    end
  end

  def fill_in_facebook_form(test_user)
    fill_in('email', :with =&gt; "#{test_user.email}") 
    fill_in('pass', :with =&gt; "#{test_user.password}")
    find('#loginbutton').click
  end

  def accept_additional_permissions
    return if page.driver.browser.window_handles.length == 1
    within_window('Facebook') do
      accept_permissions_outside_facebook
    end
  end

  def accept_permissions_outside_facebook
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
    find(:xpath, "//button[@name='__CONFIRM__']").click if page.driver.browser.window_handles.length == 2
  end

  def deauth_app
    sleep 1
    page.execute_script %Q{
       FB.api("/me/permissions","DELETE", function(response){
         console.log(response)
       });
     }
    sleep 1
  end

  def logout
    sleep 1
    page.execute_script %Q{
      FB.logout(function(response) {
        // user is now logged out
      });
     }
    sleep 1
  end

end
</code></pre>

<p>```
The above module can be easily included in Rspec&rsquo;s configure block with the config.includes command</p>

<p>``` ruby</p>

<pre><code>RSpec.configure do |config|

  ....
  config.include FacebookMacros
  ....

end
</code></pre>

<p>```
An example scenario using these macros. Its important that they are run with javascript enabled.</p>

<p>``` ruby</p>

<pre><code>scenario 'user import friends', :js =&gt; true do
  visit root_path  
  complete_facebook_dialogues_on_click('#auth_me', test_user)
  page.should have_css('#entry_step_1') 
  visit home_dashboard_path


  expect{

    sleep 2
    find('#add_events').click

    accept_additional_permissions
    sleep 2

    page.should_not have_css('#add_events')
    page.should have_css('.events_item')
    # deal with additional perms
  }.to change(Event, :count)


  logout
  Capybara.reset_session!
end
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
</feed>
