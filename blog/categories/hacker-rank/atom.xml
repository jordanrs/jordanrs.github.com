<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacker rank | Jordan Rogers-Smith]]></title>
  <link href="http://jordanrs.github.io/blog/categories/hacker-rank/atom.xml" rel="self"/>
  <link href="http://jordanrs.github.io/"/>
  <updated>2014-05-26T19:06:15+01:00</updated>
  <id>http://jordanrs.github.io/</id>
  <author>
    <name><![CDATA[Jordan Rogers-Smith]]></name>
    <email><![CDATA[jordanrs2k1@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Angry Children]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-angry-children/"/>
    <updated>2014-05-26T18:55:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-angry-children</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/angry-children">Hacker Rank Solutions: Angry Children</a></p>

<p>``` ruby
  n = gets.to_i
  k = gets.to_i
  candy = []
  n.times do |i|</p>

<pre><code>candy[i] = gets.to_i
</code></pre>

<p>  end</p>

<p>  candy.sort!</p>

<p>  # sliding widow
  j = k
  i = 0
  lowest_dif = Float::INFINITY</p>

<p>  while j &lt;= candy.length do</p>

<pre><code>dif = candy[j - 1] - candy[i]
lowest_dif = dif if dif &lt; lowest_dif

break if lowest_dif == 0

j += 1
i += 1
</code></pre>

<p>  end</p>

<p>  puts lowest_dif</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Utopian Tree]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-utopian-tree/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-utopian-tree</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/utopian-tree">Hacker Rank Solutions: Utopian Tree</a></p>

<p>``` ruby
test_cases = $stdin.gets.chomp.to_i</p>

<p>test_cases.times do
  years = $stdin.gets.chomp
  sum = 1
  years.to_i.times do |i|</p>

<pre><code>if i % 2 == 0
  sum *= 2
else
  sum += 1
end
</code></pre>

<p>  end
  $stdout.puts sum
end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Sherlock and The Beast]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-sherlock-and-the-beast/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-sherlock-and-the-beast</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/sherlock-and-the-beast">Hacker Rank Solutions: Sherlock and The Beast</a></p>

<p>``` ruby</p>

<p>def largest_decent_number(n)
  return -1 if n == 1 || n == 2</p>

<p>  j = 0
  loop do</p>

<pre><code>break if n - j &lt;= 2 

if (n - j) % 3 == 0
  return "#{'5' * (n - j) }#{'3' *  j }"
end
j += 5
</code></pre>

<p>  end</p>

<p>  if (n % 5 == 0)</p>

<pre><code>'3' * n  
</code></pre>

<p>  else</p>

<pre><code>-1
</code></pre>

<p>  end
end</p>

<p>test_cases = $stdin.gets.to_i</p>

<p>test_cases.times do
  value = $stdin.gets.to_i</p>

<p>  $stdout.puts largest_decent_number(value)
end</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker Rank Solutions: Is Fibo?]]></title>
    <link href="http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-is-fibo%3F/"/>
    <updated>2014-05-26T18:49:00+01:00</updated>
    <id>http://jordanrs.github.io/blog/2014/05/26/hacker-rank-solutions-is-fibo?</id>
    <content type="html"><![CDATA[<p><a href="https://www.hackerrank.com/challenges/is-fibo">Hacker Rank Solutions: Is Fibo?</a></p>

<p>``` ruby</p>

<p>def fibonachi_upto(n)
  return 0 if n == 0
  return 1 if n == 1
  return 1 if n == 2
  prev2 = 1
  prev1 = 1</p>

<p>  a = [0, 1, 1]
  i = 3</p>

<p>  while prev1 &lt;= n do</p>

<pre><code>tmp = prev1 + prev2
a &lt;&lt; tmp if tmp &lt;= n
prev2 = prev1
prev1 = tmp
i += 1
</code></pre>

<p>  end</p>

<p>  return a
end</p>

<p>fibos = fibonachi_upto(10000000000)</p>

<p>test_cases = $stdin.gets.to_i</p>

<p>test_cases.times do
  value = $stdin.gets.to_i
  if fibos.include?(value)</p>

<pre><code>puts 'IsFibo'
</code></pre>

<p>  else</p>

<pre><code>puts 'IsNotFibo'
</code></pre>

<p>  end
end</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
